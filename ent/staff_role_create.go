// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/role"
	"github.com/golden-ocean/fiber-ocean/ent/staff"
	"github.com/golden-ocean/fiber-ocean/ent/staff_role"
)

// StaffRoleCreate is the builder for creating a Staff_Role entity.
type StaffRoleCreate struct {
	config
	mutation *StaffRoleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (src *StaffRoleCreate) SetCreatedAt(i int64) *StaffRoleCreate {
	src.mutation.SetCreatedAt(i)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *StaffRoleCreate) SetNillableCreatedAt(i *int64) *StaffRoleCreate {
	if i != nil {
		src.SetCreatedAt(*i)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *StaffRoleCreate) SetUpdatedAt(i int64) *StaffRoleCreate {
	src.mutation.SetUpdatedAt(i)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *StaffRoleCreate) SetNillableUpdatedAt(i *int64) *StaffRoleCreate {
	if i != nil {
		src.SetUpdatedAt(*i)
	}
	return src
}

// SetCreatedBy sets the "created_by" field.
func (src *StaffRoleCreate) SetCreatedBy(s string) *StaffRoleCreate {
	src.mutation.SetCreatedBy(s)
	return src
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (src *StaffRoleCreate) SetNillableCreatedBy(s *string) *StaffRoleCreate {
	if s != nil {
		src.SetCreatedBy(*s)
	}
	return src
}

// SetUpdatedBy sets the "updated_by" field.
func (src *StaffRoleCreate) SetUpdatedBy(s string) *StaffRoleCreate {
	src.mutation.SetUpdatedBy(s)
	return src
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (src *StaffRoleCreate) SetNillableUpdatedBy(s *string) *StaffRoleCreate {
	if s != nil {
		src.SetUpdatedBy(*s)
	}
	return src
}

// SetStaffID sets the "staff_id" field.
func (src *StaffRoleCreate) SetStaffID(s string) *StaffRoleCreate {
	src.mutation.SetStaffID(s)
	return src
}

// SetRoleID sets the "role_id" field.
func (src *StaffRoleCreate) SetRoleID(s string) *StaffRoleCreate {
	src.mutation.SetRoleID(s)
	return src
}

// SetID sets the "id" field.
func (src *StaffRoleCreate) SetID(s string) *StaffRoleCreate {
	src.mutation.SetID(s)
	return src
}

// SetStaffsID sets the "staffs" edge to the Staff entity by ID.
func (src *StaffRoleCreate) SetStaffsID(id string) *StaffRoleCreate {
	src.mutation.SetStaffsID(id)
	return src
}

// SetStaffs sets the "staffs" edge to the Staff entity.
func (src *StaffRoleCreate) SetStaffs(s *Staff) *StaffRoleCreate {
	return src.SetStaffsID(s.ID)
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (src *StaffRoleCreate) SetRolesID(id string) *StaffRoleCreate {
	src.mutation.SetRolesID(id)
	return src
}

// SetRoles sets the "roles" edge to the Role entity.
func (src *StaffRoleCreate) SetRoles(r *Role) *StaffRoleCreate {
	return src.SetRolesID(r.ID)
}

// Mutation returns the StaffRoleMutation object of the builder.
func (src *StaffRoleCreate) Mutation() *StaffRoleMutation {
	return src.mutation
}

// Save creates the Staff_Role in the database.
func (src *StaffRoleCreate) Save(ctx context.Context) (*Staff_Role, error) {
	if err := src.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *StaffRoleCreate) SaveX(ctx context.Context) *Staff_Role {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *StaffRoleCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *StaffRoleCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *StaffRoleCreate) defaults() error {
	if _, ok := src.mutation.CreatedAt(); !ok {
		if staff_role.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized staff_role.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := staff_role.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		if staff_role.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized staff_role.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := staff_role.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (src *StaffRoleCreate) check() error {
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Staff_Role.created_at"`)}
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Staff_Role.updated_at"`)}
	}
	if _, ok := src.mutation.StaffID(); !ok {
		return &ValidationError{Name: "staff_id", err: errors.New(`ent: missing required field "Staff_Role.staff_id"`)}
	}
	if v, ok := src.mutation.StaffID(); ok {
		if err := staff_role.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Role.staff_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "Staff_Role.role_id"`)}
	}
	if v, ok := src.mutation.RoleID(); ok {
		if err := staff_role.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Role.role_id": %w`, err)}
		}
	}
	if v, ok := src.mutation.ID(); ok {
		if err := staff_role.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Staff_Role.id": %w`, err)}
		}
	}
	if _, ok := src.mutation.StaffsID(); !ok {
		return &ValidationError{Name: "staffs", err: errors.New(`ent: missing required edge "Staff_Role.staffs"`)}
	}
	if _, ok := src.mutation.RolesID(); !ok {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required edge "Staff_Role.roles"`)}
	}
	return nil
}

func (src *StaffRoleCreate) sqlSave(ctx context.Context) (*Staff_Role, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Staff_Role.ID type: %T", _spec.ID.Value)
		}
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *StaffRoleCreate) createSpec() (*Staff_Role, *sqlgraph.CreateSpec) {
	var (
		_node = &Staff_Role{config: src.config}
		_spec = sqlgraph.NewCreateSpec(staff_role.Table, sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(staff_role.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(staff_role.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := src.mutation.CreatedBy(); ok {
		_spec.SetField(staff_role.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := src.mutation.UpdatedBy(); ok {
		_spec.SetField(staff_role.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if nodes := src.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.StaffsTable,
			Columns: []string{staff_role.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StaffID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.RolesTable,
			Columns: []string{staff_role.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StaffRoleCreateBulk is the builder for creating many Staff_Role entities in bulk.
type StaffRoleCreateBulk struct {
	config
	err      error
	builders []*StaffRoleCreate
}

// Save creates the Staff_Role entities in the database.
func (srcb *StaffRoleCreateBulk) Save(ctx context.Context) ([]*Staff_Role, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*Staff_Role, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StaffRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *StaffRoleCreateBulk) SaveX(ctx context.Context) []*Staff_Role {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *StaffRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *StaffRoleCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
