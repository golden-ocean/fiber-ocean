// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/golden-ocean/fiber-ocean/ent/dictionary"
	"github.com/golden-ocean/fiber-ocean/ent/dictionary_item"
)

// Dictionary_Item is the model entity for the Dictionary_Item schema.
type Dictionary_Item struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID string `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 创建人员
	CreatedBy string `json:"created_by,omitempty"`
	// 更新人员
	UpdatedBy string `json:"updated_by,omitempty"`
	// 状态: Enable/Disable
	Status string `json:"status,omitempty"`
	// 排序
	Sort int32 `json:"sort,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 字典选项标签
	Label string `json:"label,omitempty"`
	// 字典选项值
	Value string `json:"value,omitempty"`
	// 颜色
	Color string `json:"color,omitempty"`
	// 字典ID
	DictionaryID string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Dictionary_ItemQuery when eager-loading is set.
	Edges        Dictionary_ItemEdges `json:"-"`
	selectValues sql.SelectValues
}

// Dictionary_ItemEdges holds the relations/edges for other nodes in the graph.
type Dictionary_ItemEdges struct {
	// Dictionary holds the value of the dictionary edge.
	Dictionary *Dictionary `json:"dictionary,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DictionaryOrErr returns the Dictionary value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Dictionary_ItemEdges) DictionaryOrErr() (*Dictionary, error) {
	if e.Dictionary != nil {
		return e.Dictionary, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: dictionary.Label}
	}
	return nil, &NotLoadedError{edge: "dictionary"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dictionary_Item) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dictionary_item.FieldCreatedAt, dictionary_item.FieldUpdatedAt, dictionary_item.FieldSort:
			values[i] = new(sql.NullInt64)
		case dictionary_item.FieldID, dictionary_item.FieldCreatedBy, dictionary_item.FieldUpdatedBy, dictionary_item.FieldStatus, dictionary_item.FieldRemark, dictionary_item.FieldLabel, dictionary_item.FieldValue, dictionary_item.FieldColor, dictionary_item.FieldDictionaryID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dictionary_Item fields.
func (di *Dictionary_Item) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dictionary_item.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				di.ID = value.String
			}
		case dictionary_item.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				di.CreatedAt = value.Int64
			}
		case dictionary_item.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				di.UpdatedAt = value.Int64
			}
		case dictionary_item.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				di.CreatedBy = value.String
			}
		case dictionary_item.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				di.UpdatedBy = value.String
			}
		case dictionary_item.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				di.Status = value.String
			}
		case dictionary_item.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				di.Sort = int32(value.Int64)
			}
		case dictionary_item.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				di.Remark = value.String
			}
		case dictionary_item.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				di.Label = value.String
			}
		case dictionary_item.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				di.Value = value.String
			}
		case dictionary_item.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				di.Color = value.String
			}
		case dictionary_item.FieldDictionaryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dictionary_id", values[i])
			} else if value.Valid {
				di.DictionaryID = value.String
			}
		default:
			di.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Dictionary_Item.
// This includes values selected through modifiers, order, etc.
func (di *Dictionary_Item) GetValue(name string) (ent.Value, error) {
	return di.selectValues.Get(name)
}

// QueryDictionary queries the "dictionary" edge of the Dictionary_Item entity.
func (di *Dictionary_Item) QueryDictionary() *DictionaryQuery {
	return NewDictionaryItemClient(di.config).QueryDictionary(di)
}

// Update returns a builder for updating this Dictionary_Item.
// Note that you need to call Dictionary_Item.Unwrap() before calling this method if this Dictionary_Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *Dictionary_Item) Update() *DictionaryItemUpdateOne {
	return NewDictionaryItemClient(di.config).UpdateOne(di)
}

// Unwrap unwraps the Dictionary_Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *Dictionary_Item) Unwrap() *Dictionary_Item {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dictionary_Item is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *Dictionary_Item) String() string {
	var builder strings.Builder
	builder.WriteString("Dictionary_Item(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", di.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", di.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(di.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(di.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(di.Status)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", di.Sort))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(di.Remark)
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(di.Label)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(di.Value)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(di.Color)
	builder.WriteString(", ")
	builder.WriteString("dictionary_id=")
	builder.WriteString(di.DictionaryID)
	builder.WriteByte(')')
	return builder.String()
}

// Dictionary_Items is a parsable slice of Dictionary_Item.
type Dictionary_Items []*Dictionary_Item
