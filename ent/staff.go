// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/golden-ocean/fiber-ocean/ent/organization"
	"github.com/golden-ocean/fiber-ocean/ent/staff"
)

// Staff is the model entity for the Staff schema.
type Staff struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID string `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 创建人员
	CreatedBy string `json:"created_by,omitempty"`
	// 更新人员
	UpdatedBy string `json:"updated_by,omitempty"`
	// 状态: Enable/Disable
	Status string `json:"status,omitempty"`
	// 排序
	Sort int32 `json:"sort,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 用户名
	Username string `json:"username,omitempty"`
	// 密码
	Password string `json:"-"`
	// 姓名
	Name string `json:"name,omitempty"`
	// 性别
	Gender string `json:"gender,omitempty"`
	// 工作状态
	WorkStatus string `json:"work_status,omitempty"`
	// 手机号码
	Mobile string `json:"mobile,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// 组织ID
	OrganizationID string `json:"organization_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StaffQuery when eager-loading is set.
	Edges        StaffEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StaffEdges holds the relations/edges for other nodes in the graph.
type StaffEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// StaffsRoles holds the value of the staffs_roles edge.
	StaffsRoles []*Staff_Role `json:"staffs_roles,omitempty"`
	// StaffsPositions holds the value of the staffs_positions edge.
	StaffsPositions []*Staff_Position `json:"staffs_positions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StaffEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// StaffsRolesOrErr returns the StaffsRoles value or an error if the edge
// was not loaded in eager-loading.
func (e StaffEdges) StaffsRolesOrErr() ([]*Staff_Role, error) {
	if e.loadedTypes[1] {
		return e.StaffsRoles, nil
	}
	return nil, &NotLoadedError{edge: "staffs_roles"}
}

// StaffsPositionsOrErr returns the StaffsPositions value or an error if the edge
// was not loaded in eager-loading.
func (e StaffEdges) StaffsPositionsOrErr() ([]*Staff_Position, error) {
	if e.loadedTypes[2] {
		return e.StaffsPositions, nil
	}
	return nil, &NotLoadedError{edge: "staffs_positions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Staff) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case staff.FieldCreatedAt, staff.FieldUpdatedAt, staff.FieldSort:
			values[i] = new(sql.NullInt64)
		case staff.FieldID, staff.FieldCreatedBy, staff.FieldUpdatedBy, staff.FieldStatus, staff.FieldRemark, staff.FieldUsername, staff.FieldPassword, staff.FieldName, staff.FieldGender, staff.FieldWorkStatus, staff.FieldMobile, staff.FieldEmail, staff.FieldAvatar, staff.FieldOrganizationID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Staff fields.
func (s *Staff) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staff.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case staff.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Int64
			}
		case staff.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Int64
			}
		case staff.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.String
			}
		case staff.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.String
			}
		case staff.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case staff.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				s.Sort = int32(value.Int64)
			}
		case staff.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				s.Remark = value.String
			}
		case staff.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				s.Username = value.String
			}
		case staff.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				s.Password = value.String
			}
		case staff.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case staff.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				s.Gender = value.String
			}
		case staff.FieldWorkStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field work_status", values[i])
			} else if value.Valid {
				s.WorkStatus = value.String
			}
		case staff.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				s.Mobile = value.String
			}
		case staff.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				s.Email = value.String
			}
		case staff.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				s.Avatar = value.String
			}
		case staff.FieldOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				s.OrganizationID = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Staff.
// This includes values selected through modifiers, order, etc.
func (s *Staff) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the Staff entity.
func (s *Staff) QueryOrganization() *OrganizationQuery {
	return NewStaffClient(s.config).QueryOrganization(s)
}

// QueryStaffsRoles queries the "staffs_roles" edge of the Staff entity.
func (s *Staff) QueryStaffsRoles() *StaffRoleQuery {
	return NewStaffClient(s.config).QueryStaffsRoles(s)
}

// QueryStaffsPositions queries the "staffs_positions" edge of the Staff entity.
func (s *Staff) QueryStaffsPositions() *StaffPositionQuery {
	return NewStaffClient(s.config).QueryStaffsPositions(s)
}

// Update returns a builder for updating this Staff.
// Note that you need to call Staff.Unwrap() before calling this method if this Staff
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Staff) Update() *StaffUpdateOne {
	return NewStaffClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Staff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Staff) Unwrap() *Staff {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Staff is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Staff) String() string {
	var builder strings.Builder
	builder.WriteString("Staff(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(s.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(s.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(s.Status)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", s.Sort))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(s.Remark)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(s.Username)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(s.Gender)
	builder.WriteString(", ")
	builder.WriteString("work_status=")
	builder.WriteString(s.WorkStatus)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(s.Mobile)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(s.Email)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(s.Avatar)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(s.OrganizationID)
	builder.WriteByte(')')
	return builder.String()
}

// Staffs is a parsable slice of Staff.
type Staffs []*Staff
