// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/dictionary"
	"github.com/golden-ocean/fiber-ocean/ent/dictionary_item"
	"github.com/golden-ocean/fiber-ocean/ent/predicate"
)

// DictionaryUpdate is the builder for updating Dictionary entities.
type DictionaryUpdate struct {
	config
	hooks    []Hook
	mutation *DictionaryMutation
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (du *DictionaryUpdate) Where(ps ...predicate.Dictionary) *DictionaryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DictionaryUpdate) SetUpdatedAt(i int64) *DictionaryUpdate {
	du.mutation.ResetUpdatedAt()
	du.mutation.SetUpdatedAt(i)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableUpdatedAt(i *int64) *DictionaryUpdate {
	if i != nil {
		du.SetUpdatedAt(*i)
	}
	return du
}

// AddUpdatedAt adds i to the "updated_at" field.
func (du *DictionaryUpdate) AddUpdatedAt(i int64) *DictionaryUpdate {
	du.mutation.AddUpdatedAt(i)
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DictionaryUpdate) SetUpdatedBy(s string) *DictionaryUpdate {
	du.mutation.SetUpdatedBy(s)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableUpdatedBy(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetUpdatedBy(*s)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DictionaryUpdate) ClearUpdatedBy() *DictionaryUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetStatus sets the "status" field.
func (du *DictionaryUpdate) SetStatus(s string) *DictionaryUpdate {
	du.mutation.SetStatus(s)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableStatus(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetStatus(*s)
	}
	return du
}

// ClearStatus clears the value of the "status" field.
func (du *DictionaryUpdate) ClearStatus() *DictionaryUpdate {
	du.mutation.ClearStatus()
	return du
}

// SetSort sets the "sort" field.
func (du *DictionaryUpdate) SetSort(i int32) *DictionaryUpdate {
	du.mutation.ResetSort()
	du.mutation.SetSort(i)
	return du
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableSort(i *int32) *DictionaryUpdate {
	if i != nil {
		du.SetSort(*i)
	}
	return du
}

// AddSort adds i to the "sort" field.
func (du *DictionaryUpdate) AddSort(i int32) *DictionaryUpdate {
	du.mutation.AddSort(i)
	return du
}

// ClearSort clears the value of the "sort" field.
func (du *DictionaryUpdate) ClearSort() *DictionaryUpdate {
	du.mutation.ClearSort()
	return du
}

// SetRemark sets the "remark" field.
func (du *DictionaryUpdate) SetRemark(s string) *DictionaryUpdate {
	du.mutation.SetRemark(s)
	return du
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableRemark(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetRemark(*s)
	}
	return du
}

// ClearRemark clears the value of the "remark" field.
func (du *DictionaryUpdate) ClearRemark() *DictionaryUpdate {
	du.mutation.ClearRemark()
	return du
}

// SetName sets the "name" field.
func (du *DictionaryUpdate) SetName(s string) *DictionaryUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableName(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetCode sets the "code" field.
func (du *DictionaryUpdate) SetCode(s string) *DictionaryUpdate {
	du.mutation.SetCode(s)
	return du
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableCode(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetCode(*s)
	}
	return du
}

// AddItemIDs adds the "items" edge to the Dictionary_Item entity by IDs.
func (du *DictionaryUpdate) AddItemIDs(ids ...string) *DictionaryUpdate {
	du.mutation.AddItemIDs(ids...)
	return du
}

// AddItems adds the "items" edges to the Dictionary_Item entity.
func (du *DictionaryUpdate) AddItems(d ...*Dictionary_Item) *DictionaryUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddItemIDs(ids...)
}

// Mutation returns the DictionaryMutation object of the builder.
func (du *DictionaryUpdate) Mutation() *DictionaryMutation {
	return du.mutation
}

// ClearItems clears all "items" edges to the Dictionary_Item entity.
func (du *DictionaryUpdate) ClearItems() *DictionaryUpdate {
	du.mutation.ClearItems()
	return du
}

// RemoveItemIDs removes the "items" edge to Dictionary_Item entities by IDs.
func (du *DictionaryUpdate) RemoveItemIDs(ids ...string) *DictionaryUpdate {
	du.mutation.RemoveItemIDs(ids...)
	return du
}

// RemoveItems removes "items" edges to Dictionary_Item entities.
func (du *DictionaryUpdate) RemoveItems(d ...*Dictionary_Item) *DictionaryUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DictionaryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DictionaryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DictionaryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DictionaryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DictionaryUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := dictionary.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Dictionary.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.Code(); ok {
		if err := dictionary.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Dictionary.code": %w`, err)}
		}
	}
	return nil
}

func (du *DictionaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictionary.Table, dictionary.Columns, sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(dictionary.FieldCreatedBy, field.TypeString)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(dictionary.FieldUpdatedBy, field.TypeString, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(dictionary.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(dictionary.FieldStatus, field.TypeString, value)
	}
	if du.mutation.StatusCleared() {
		_spec.ClearField(dictionary.FieldStatus, field.TypeString)
	}
	if value, ok := du.mutation.Sort(); ok {
		_spec.SetField(dictionary.FieldSort, field.TypeInt32, value)
	}
	if value, ok := du.mutation.AddedSort(); ok {
		_spec.AddField(dictionary.FieldSort, field.TypeInt32, value)
	}
	if du.mutation.SortCleared() {
		_spec.ClearField(dictionary.FieldSort, field.TypeInt32)
	}
	if value, ok := du.mutation.Remark(); ok {
		_spec.SetField(dictionary.FieldRemark, field.TypeString, value)
	}
	if du.mutation.RemarkCleared() {
		_spec.ClearField(dictionary.FieldRemark, field.TypeString)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(dictionary.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Code(); ok {
		_spec.SetField(dictionary.FieldCode, field.TypeString, value)
	}
	if du.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.ItemsTable,
			Columns: []string{dictionary.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary_item.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedItemsIDs(); len(nodes) > 0 && !du.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.ItemsTable,
			Columns: []string{dictionary.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary_item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.ItemsTable,
			Columns: []string{dictionary.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary_item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DictionaryUpdateOne is the builder for updating a single Dictionary entity.
type DictionaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictionaryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DictionaryUpdateOne) SetUpdatedAt(i int64) *DictionaryUpdateOne {
	duo.mutation.ResetUpdatedAt()
	duo.mutation.SetUpdatedAt(i)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableUpdatedAt(i *int64) *DictionaryUpdateOne {
	if i != nil {
		duo.SetUpdatedAt(*i)
	}
	return duo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (duo *DictionaryUpdateOne) AddUpdatedAt(i int64) *DictionaryUpdateOne {
	duo.mutation.AddUpdatedAt(i)
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DictionaryUpdateOne) SetUpdatedBy(s string) *DictionaryUpdateOne {
	duo.mutation.SetUpdatedBy(s)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableUpdatedBy(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetUpdatedBy(*s)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DictionaryUpdateOne) ClearUpdatedBy() *DictionaryUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetStatus sets the "status" field.
func (duo *DictionaryUpdateOne) SetStatus(s string) *DictionaryUpdateOne {
	duo.mutation.SetStatus(s)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableStatus(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetStatus(*s)
	}
	return duo
}

// ClearStatus clears the value of the "status" field.
func (duo *DictionaryUpdateOne) ClearStatus() *DictionaryUpdateOne {
	duo.mutation.ClearStatus()
	return duo
}

// SetSort sets the "sort" field.
func (duo *DictionaryUpdateOne) SetSort(i int32) *DictionaryUpdateOne {
	duo.mutation.ResetSort()
	duo.mutation.SetSort(i)
	return duo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableSort(i *int32) *DictionaryUpdateOne {
	if i != nil {
		duo.SetSort(*i)
	}
	return duo
}

// AddSort adds i to the "sort" field.
func (duo *DictionaryUpdateOne) AddSort(i int32) *DictionaryUpdateOne {
	duo.mutation.AddSort(i)
	return duo
}

// ClearSort clears the value of the "sort" field.
func (duo *DictionaryUpdateOne) ClearSort() *DictionaryUpdateOne {
	duo.mutation.ClearSort()
	return duo
}

// SetRemark sets the "remark" field.
func (duo *DictionaryUpdateOne) SetRemark(s string) *DictionaryUpdateOne {
	duo.mutation.SetRemark(s)
	return duo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableRemark(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetRemark(*s)
	}
	return duo
}

// ClearRemark clears the value of the "remark" field.
func (duo *DictionaryUpdateOne) ClearRemark() *DictionaryUpdateOne {
	duo.mutation.ClearRemark()
	return duo
}

// SetName sets the "name" field.
func (duo *DictionaryUpdateOne) SetName(s string) *DictionaryUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableName(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetCode sets the "code" field.
func (duo *DictionaryUpdateOne) SetCode(s string) *DictionaryUpdateOne {
	duo.mutation.SetCode(s)
	return duo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableCode(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetCode(*s)
	}
	return duo
}

// AddItemIDs adds the "items" edge to the Dictionary_Item entity by IDs.
func (duo *DictionaryUpdateOne) AddItemIDs(ids ...string) *DictionaryUpdateOne {
	duo.mutation.AddItemIDs(ids...)
	return duo
}

// AddItems adds the "items" edges to the Dictionary_Item entity.
func (duo *DictionaryUpdateOne) AddItems(d ...*Dictionary_Item) *DictionaryUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddItemIDs(ids...)
}

// Mutation returns the DictionaryMutation object of the builder.
func (duo *DictionaryUpdateOne) Mutation() *DictionaryMutation {
	return duo.mutation
}

// ClearItems clears all "items" edges to the Dictionary_Item entity.
func (duo *DictionaryUpdateOne) ClearItems() *DictionaryUpdateOne {
	duo.mutation.ClearItems()
	return duo
}

// RemoveItemIDs removes the "items" edge to Dictionary_Item entities by IDs.
func (duo *DictionaryUpdateOne) RemoveItemIDs(ids ...string) *DictionaryUpdateOne {
	duo.mutation.RemoveItemIDs(ids...)
	return duo
}

// RemoveItems removes "items" edges to Dictionary_Item entities.
func (duo *DictionaryUpdateOne) RemoveItems(d ...*Dictionary_Item) *DictionaryUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (duo *DictionaryUpdateOne) Where(ps ...predicate.Dictionary) *DictionaryUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DictionaryUpdateOne) Select(field string, fields ...string) *DictionaryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dictionary entity.
func (duo *DictionaryUpdateOne) Save(ctx context.Context) (*Dictionary, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DictionaryUpdateOne) SaveX(ctx context.Context) *Dictionary {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DictionaryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DictionaryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DictionaryUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := dictionary.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Dictionary.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Code(); ok {
		if err := dictionary.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Dictionary.code": %w`, err)}
		}
	}
	return nil
}

func (duo *DictionaryUpdateOne) sqlSave(ctx context.Context) (_node *Dictionary, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictionary.Table, dictionary.Columns, sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dictionary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictionary.FieldID)
		for _, f := range fields {
			if !dictionary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictionary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dictionary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(dictionary.FieldCreatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(dictionary.FieldUpdatedBy, field.TypeString, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(dictionary.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(dictionary.FieldStatus, field.TypeString, value)
	}
	if duo.mutation.StatusCleared() {
		_spec.ClearField(dictionary.FieldStatus, field.TypeString)
	}
	if value, ok := duo.mutation.Sort(); ok {
		_spec.SetField(dictionary.FieldSort, field.TypeInt32, value)
	}
	if value, ok := duo.mutation.AddedSort(); ok {
		_spec.AddField(dictionary.FieldSort, field.TypeInt32, value)
	}
	if duo.mutation.SortCleared() {
		_spec.ClearField(dictionary.FieldSort, field.TypeInt32)
	}
	if value, ok := duo.mutation.Remark(); ok {
		_spec.SetField(dictionary.FieldRemark, field.TypeString, value)
	}
	if duo.mutation.RemarkCleared() {
		_spec.ClearField(dictionary.FieldRemark, field.TypeString)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(dictionary.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Code(); ok {
		_spec.SetField(dictionary.FieldCode, field.TypeString, value)
	}
	if duo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.ItemsTable,
			Columns: []string{dictionary.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary_item.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !duo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.ItemsTable,
			Columns: []string{dictionary.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary_item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.ItemsTable,
			Columns: []string{dictionary.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary_item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dictionary{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
