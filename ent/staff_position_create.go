// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/position"
	"github.com/golden-ocean/fiber-ocean/ent/staff"
	"github.com/golden-ocean/fiber-ocean/ent/staff_position"
)

// StaffPositionCreate is the builder for creating a Staff_Position entity.
type StaffPositionCreate struct {
	config
	mutation *StaffPositionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (spc *StaffPositionCreate) SetCreatedAt(i int64) *StaffPositionCreate {
	spc.mutation.SetCreatedAt(i)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *StaffPositionCreate) SetNillableCreatedAt(i *int64) *StaffPositionCreate {
	if i != nil {
		spc.SetCreatedAt(*i)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *StaffPositionCreate) SetUpdatedAt(i int64) *StaffPositionCreate {
	spc.mutation.SetUpdatedAt(i)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *StaffPositionCreate) SetNillableUpdatedAt(i *int64) *StaffPositionCreate {
	if i != nil {
		spc.SetUpdatedAt(*i)
	}
	return spc
}

// SetCreatedBy sets the "created_by" field.
func (spc *StaffPositionCreate) SetCreatedBy(s string) *StaffPositionCreate {
	spc.mutation.SetCreatedBy(s)
	return spc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spc *StaffPositionCreate) SetNillableCreatedBy(s *string) *StaffPositionCreate {
	if s != nil {
		spc.SetCreatedBy(*s)
	}
	return spc
}

// SetUpdatedBy sets the "updated_by" field.
func (spc *StaffPositionCreate) SetUpdatedBy(s string) *StaffPositionCreate {
	spc.mutation.SetUpdatedBy(s)
	return spc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spc *StaffPositionCreate) SetNillableUpdatedBy(s *string) *StaffPositionCreate {
	if s != nil {
		spc.SetUpdatedBy(*s)
	}
	return spc
}

// SetStaffID sets the "staff_id" field.
func (spc *StaffPositionCreate) SetStaffID(s string) *StaffPositionCreate {
	spc.mutation.SetStaffID(s)
	return spc
}

// SetPositionID sets the "position_id" field.
func (spc *StaffPositionCreate) SetPositionID(s string) *StaffPositionCreate {
	spc.mutation.SetPositionID(s)
	return spc
}

// SetID sets the "id" field.
func (spc *StaffPositionCreate) SetID(s string) *StaffPositionCreate {
	spc.mutation.SetID(s)
	return spc
}

// SetStaffsID sets the "staffs" edge to the Staff entity by ID.
func (spc *StaffPositionCreate) SetStaffsID(id string) *StaffPositionCreate {
	spc.mutation.SetStaffsID(id)
	return spc
}

// SetStaffs sets the "staffs" edge to the Staff entity.
func (spc *StaffPositionCreate) SetStaffs(s *Staff) *StaffPositionCreate {
	return spc.SetStaffsID(s.ID)
}

// SetPositionsID sets the "positions" edge to the Position entity by ID.
func (spc *StaffPositionCreate) SetPositionsID(id string) *StaffPositionCreate {
	spc.mutation.SetPositionsID(id)
	return spc
}

// SetPositions sets the "positions" edge to the Position entity.
func (spc *StaffPositionCreate) SetPositions(p *Position) *StaffPositionCreate {
	return spc.SetPositionsID(p.ID)
}

// Mutation returns the StaffPositionMutation object of the builder.
func (spc *StaffPositionCreate) Mutation() *StaffPositionMutation {
	return spc.mutation
}

// Save creates the Staff_Position in the database.
func (spc *StaffPositionCreate) Save(ctx context.Context) (*Staff_Position, error) {
	if err := spc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *StaffPositionCreate) SaveX(ctx context.Context) *Staff_Position {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *StaffPositionCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *StaffPositionCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *StaffPositionCreate) defaults() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		if staff_position.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized staff_position.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := staff_position.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		if staff_position.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized staff_position.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := staff_position.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spc *StaffPositionCreate) check() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Staff_Position.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Staff_Position.updated_at"`)}
	}
	if _, ok := spc.mutation.StaffID(); !ok {
		return &ValidationError{Name: "staff_id", err: errors.New(`ent: missing required field "Staff_Position.staff_id"`)}
	}
	if v, ok := spc.mutation.StaffID(); ok {
		if err := staff_position.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Position.staff_id": %w`, err)}
		}
	}
	if _, ok := spc.mutation.PositionID(); !ok {
		return &ValidationError{Name: "position_id", err: errors.New(`ent: missing required field "Staff_Position.position_id"`)}
	}
	if v, ok := spc.mutation.PositionID(); ok {
		if err := staff_position.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Position.position_id": %w`, err)}
		}
	}
	if v, ok := spc.mutation.ID(); ok {
		if err := staff_position.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Staff_Position.id": %w`, err)}
		}
	}
	if _, ok := spc.mutation.StaffsID(); !ok {
		return &ValidationError{Name: "staffs", err: errors.New(`ent: missing required edge "Staff_Position.staffs"`)}
	}
	if _, ok := spc.mutation.PositionsID(); !ok {
		return &ValidationError{Name: "positions", err: errors.New(`ent: missing required edge "Staff_Position.positions"`)}
	}
	return nil
}

func (spc *StaffPositionCreate) sqlSave(ctx context.Context) (*Staff_Position, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Staff_Position.ID type: %T", _spec.ID.Value)
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *StaffPositionCreate) createSpec() (*Staff_Position, *sqlgraph.CreateSpec) {
	var (
		_node = &Staff_Position{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(staff_position.Table, sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString))
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.SetField(staff_position.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.SetField(staff_position.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.CreatedBy(); ok {
		_spec.SetField(staff_position.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := spc.mutation.UpdatedBy(); ok {
		_spec.SetField(staff_position.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if nodes := spc.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.StaffsTable,
			Columns: []string{staff_position.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StaffID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.PositionsTable,
			Columns: []string{staff_position.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PositionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StaffPositionCreateBulk is the builder for creating many Staff_Position entities in bulk.
type StaffPositionCreateBulk struct {
	config
	err      error
	builders []*StaffPositionCreate
}

// Save creates the Staff_Position entities in the database.
func (spcb *StaffPositionCreateBulk) Save(ctx context.Context) ([]*Staff_Position, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*Staff_Position, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StaffPositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *StaffPositionCreateBulk) SaveX(ctx context.Context) []*Staff_Position {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *StaffPositionCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *StaffPositionCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
