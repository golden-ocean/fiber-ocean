// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/organization"
	"github.com/golden-ocean/fiber-ocean/ent/predicate"
	"github.com/golden-ocean/fiber-ocean/ent/staff"
	"github.com/golden-ocean/fiber-ocean/ent/staff_position"
	"github.com/golden-ocean/fiber-ocean/ent/staff_role"
)

// StaffUpdate is the builder for updating Staff entities.
type StaffUpdate struct {
	config
	hooks    []Hook
	mutation *StaffMutation
}

// Where appends a list predicates to the StaffUpdate builder.
func (su *StaffUpdate) Where(ps ...predicate.Staff) *StaffUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StaffUpdate) SetUpdatedAt(i int64) *StaffUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(i)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *StaffUpdate) SetNillableUpdatedAt(i *int64) *StaffUpdate {
	if i != nil {
		su.SetUpdatedAt(*i)
	}
	return su
}

// AddUpdatedAt adds i to the "updated_at" field.
func (su *StaffUpdate) AddUpdatedAt(i int64) *StaffUpdate {
	su.mutation.AddUpdatedAt(i)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *StaffUpdate) SetUpdatedBy(s string) *StaffUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *StaffUpdate) SetNillableUpdatedBy(s *string) *StaffUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *StaffUpdate) ClearUpdatedBy() *StaffUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetStatus sets the "status" field.
func (su *StaffUpdate) SetStatus(s string) *StaffUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StaffUpdate) SetNillableStatus(s *string) *StaffUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *StaffUpdate) ClearStatus() *StaffUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetSort sets the "sort" field.
func (su *StaffUpdate) SetSort(i int32) *StaffUpdate {
	su.mutation.ResetSort()
	su.mutation.SetSort(i)
	return su
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (su *StaffUpdate) SetNillableSort(i *int32) *StaffUpdate {
	if i != nil {
		su.SetSort(*i)
	}
	return su
}

// AddSort adds i to the "sort" field.
func (su *StaffUpdate) AddSort(i int32) *StaffUpdate {
	su.mutation.AddSort(i)
	return su
}

// ClearSort clears the value of the "sort" field.
func (su *StaffUpdate) ClearSort() *StaffUpdate {
	su.mutation.ClearSort()
	return su
}

// SetRemark sets the "remark" field.
func (su *StaffUpdate) SetRemark(s string) *StaffUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *StaffUpdate) SetNillableRemark(s *string) *StaffUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *StaffUpdate) ClearRemark() *StaffUpdate {
	su.mutation.ClearRemark()
	return su
}

// SetUsername sets the "username" field.
func (su *StaffUpdate) SetUsername(s string) *StaffUpdate {
	su.mutation.SetUsername(s)
	return su
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (su *StaffUpdate) SetNillableUsername(s *string) *StaffUpdate {
	if s != nil {
		su.SetUsername(*s)
	}
	return su
}

// SetPassword sets the "password" field.
func (su *StaffUpdate) SetPassword(s string) *StaffUpdate {
	su.mutation.SetPassword(s)
	return su
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (su *StaffUpdate) SetNillablePassword(s *string) *StaffUpdate {
	if s != nil {
		su.SetPassword(*s)
	}
	return su
}

// SetName sets the "name" field.
func (su *StaffUpdate) SetName(s string) *StaffUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StaffUpdate) SetNillableName(s *string) *StaffUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetGender sets the "gender" field.
func (su *StaffUpdate) SetGender(s string) *StaffUpdate {
	su.mutation.SetGender(s)
	return su
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (su *StaffUpdate) SetNillableGender(s *string) *StaffUpdate {
	if s != nil {
		su.SetGender(*s)
	}
	return su
}

// ClearGender clears the value of the "gender" field.
func (su *StaffUpdate) ClearGender() *StaffUpdate {
	su.mutation.ClearGender()
	return su
}

// SetWorkStatus sets the "work_status" field.
func (su *StaffUpdate) SetWorkStatus(s string) *StaffUpdate {
	su.mutation.SetWorkStatus(s)
	return su
}

// SetNillableWorkStatus sets the "work_status" field if the given value is not nil.
func (su *StaffUpdate) SetNillableWorkStatus(s *string) *StaffUpdate {
	if s != nil {
		su.SetWorkStatus(*s)
	}
	return su
}

// ClearWorkStatus clears the value of the "work_status" field.
func (su *StaffUpdate) ClearWorkStatus() *StaffUpdate {
	su.mutation.ClearWorkStatus()
	return su
}

// SetMobile sets the "mobile" field.
func (su *StaffUpdate) SetMobile(s string) *StaffUpdate {
	su.mutation.SetMobile(s)
	return su
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (su *StaffUpdate) SetNillableMobile(s *string) *StaffUpdate {
	if s != nil {
		su.SetMobile(*s)
	}
	return su
}

// SetEmail sets the "email" field.
func (su *StaffUpdate) SetEmail(s string) *StaffUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (su *StaffUpdate) SetNillableEmail(s *string) *StaffUpdate {
	if s != nil {
		su.SetEmail(*s)
	}
	return su
}

// SetAvatar sets the "avatar" field.
func (su *StaffUpdate) SetAvatar(s string) *StaffUpdate {
	su.mutation.SetAvatar(s)
	return su
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (su *StaffUpdate) SetNillableAvatar(s *string) *StaffUpdate {
	if s != nil {
		su.SetAvatar(*s)
	}
	return su
}

// ClearAvatar clears the value of the "avatar" field.
func (su *StaffUpdate) ClearAvatar() *StaffUpdate {
	su.mutation.ClearAvatar()
	return su
}

// SetOrganizationID sets the "organization_id" field.
func (su *StaffUpdate) SetOrganizationID(s string) *StaffUpdate {
	su.mutation.SetOrganizationID(s)
	return su
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (su *StaffUpdate) SetNillableOrganizationID(s *string) *StaffUpdate {
	if s != nil {
		su.SetOrganizationID(*s)
	}
	return su
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (su *StaffUpdate) ClearOrganizationID() *StaffUpdate {
	su.mutation.ClearOrganizationID()
	return su
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (su *StaffUpdate) SetOrganization(o *Organization) *StaffUpdate {
	return su.SetOrganizationID(o.ID)
}

// AddRoleIDs adds the "roles" edge to the Staff_Role entity by IDs.
func (su *StaffUpdate) AddRoleIDs(ids ...string) *StaffUpdate {
	su.mutation.AddRoleIDs(ids...)
	return su
}

// AddRoles adds the "roles" edges to the Staff_Role entity.
func (su *StaffUpdate) AddRoles(s ...*Staff_Role) *StaffUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddRoleIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the Staff_Position entity by IDs.
func (su *StaffUpdate) AddPositionIDs(ids ...string) *StaffUpdate {
	su.mutation.AddPositionIDs(ids...)
	return su
}

// AddPositions adds the "positions" edges to the Staff_Position entity.
func (su *StaffUpdate) AddPositions(s ...*Staff_Position) *StaffUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddPositionIDs(ids...)
}

// Mutation returns the StaffMutation object of the builder.
func (su *StaffUpdate) Mutation() *StaffMutation {
	return su.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (su *StaffUpdate) ClearOrganization() *StaffUpdate {
	su.mutation.ClearOrganization()
	return su
}

// ClearRoles clears all "roles" edges to the Staff_Role entity.
func (su *StaffUpdate) ClearRoles() *StaffUpdate {
	su.mutation.ClearRoles()
	return su
}

// RemoveRoleIDs removes the "roles" edge to Staff_Role entities by IDs.
func (su *StaffUpdate) RemoveRoleIDs(ids ...string) *StaffUpdate {
	su.mutation.RemoveRoleIDs(ids...)
	return su
}

// RemoveRoles removes "roles" edges to Staff_Role entities.
func (su *StaffUpdate) RemoveRoles(s ...*Staff_Role) *StaffUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveRoleIDs(ids...)
}

// ClearPositions clears all "positions" edges to the Staff_Position entity.
func (su *StaffUpdate) ClearPositions() *StaffUpdate {
	su.mutation.ClearPositions()
	return su
}

// RemovePositionIDs removes the "positions" edge to Staff_Position entities by IDs.
func (su *StaffUpdate) RemovePositionIDs(ids ...string) *StaffUpdate {
	su.mutation.RemovePositionIDs(ids...)
	return su
}

// RemovePositions removes "positions" edges to Staff_Position entities.
func (su *StaffUpdate) RemovePositions(s ...*Staff_Position) *StaffUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemovePositionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StaffUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StaffUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StaffUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StaffUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StaffUpdate) check() error {
	if v, ok := su.mutation.Username(); ok {
		if err := staff.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Staff.username": %w`, err)}
		}
	}
	if v, ok := su.mutation.Password(); ok {
		if err := staff.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Staff.password": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := staff.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Staff.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Mobile(); ok {
		if err := staff.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "Staff.mobile": %w`, err)}
		}
	}
	if v, ok := su.mutation.Email(); ok {
		if err := staff.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Staff.email": %w`, err)}
		}
	}
	return nil
}

func (su *StaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(staff.Table, staff.Columns, sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(staff.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(staff.FieldUpdatedAt, field.TypeInt64, value)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(staff.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(staff.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(staff.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(staff.FieldStatus, field.TypeString, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(staff.FieldStatus, field.TypeString)
	}
	if value, ok := su.mutation.Sort(); ok {
		_spec.SetField(staff.FieldSort, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedSort(); ok {
		_spec.AddField(staff.FieldSort, field.TypeInt32, value)
	}
	if su.mutation.SortCleared() {
		_spec.ClearField(staff.FieldSort, field.TypeInt32)
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.SetField(staff.FieldRemark, field.TypeString, value)
	}
	if su.mutation.RemarkCleared() {
		_spec.ClearField(staff.FieldRemark, field.TypeString)
	}
	if value, ok := su.mutation.Username(); ok {
		_spec.SetField(staff.FieldUsername, field.TypeString, value)
	}
	if value, ok := su.mutation.Password(); ok {
		_spec.SetField(staff.FieldPassword, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(staff.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Gender(); ok {
		_spec.SetField(staff.FieldGender, field.TypeString, value)
	}
	if su.mutation.GenderCleared() {
		_spec.ClearField(staff.FieldGender, field.TypeString)
	}
	if value, ok := su.mutation.WorkStatus(); ok {
		_spec.SetField(staff.FieldWorkStatus, field.TypeString, value)
	}
	if su.mutation.WorkStatusCleared() {
		_spec.ClearField(staff.FieldWorkStatus, field.TypeString)
	}
	if value, ok := su.mutation.Mobile(); ok {
		_spec.SetField(staff.FieldMobile, field.TypeString, value)
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.SetField(staff.FieldEmail, field.TypeString, value)
	}
	if value, ok := su.mutation.Avatar(); ok {
		_spec.SetField(staff.FieldAvatar, field.TypeString, value)
	}
	if su.mutation.AvatarCleared() {
		_spec.ClearField(staff.FieldAvatar, field.TypeString)
	}
	if su.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staff.OrganizationTable,
			Columns: []string{staff.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staff.OrganizationTable,
			Columns: []string{staff.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.RolesTable,
			Columns: []string{staff.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRolesIDs(); len(nodes) > 0 && !su.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.RolesTable,
			Columns: []string{staff.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.RolesTable,
			Columns: []string{staff.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.PositionsTable,
			Columns: []string{staff.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !su.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.PositionsTable,
			Columns: []string{staff.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.PositionsTable,
			Columns: []string{staff.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StaffUpdateOne is the builder for updating a single Staff entity.
type StaffUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StaffMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StaffUpdateOne) SetUpdatedAt(i int64) *StaffUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(i)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableUpdatedAt(i *int64) *StaffUpdateOne {
	if i != nil {
		suo.SetUpdatedAt(*i)
	}
	return suo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (suo *StaffUpdateOne) AddUpdatedAt(i int64) *StaffUpdateOne {
	suo.mutation.AddUpdatedAt(i)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *StaffUpdateOne) SetUpdatedBy(s string) *StaffUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableUpdatedBy(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *StaffUpdateOne) ClearUpdatedBy() *StaffUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetStatus sets the "status" field.
func (suo *StaffUpdateOne) SetStatus(s string) *StaffUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableStatus(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *StaffUpdateOne) ClearStatus() *StaffUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetSort sets the "sort" field.
func (suo *StaffUpdateOne) SetSort(i int32) *StaffUpdateOne {
	suo.mutation.ResetSort()
	suo.mutation.SetSort(i)
	return suo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableSort(i *int32) *StaffUpdateOne {
	if i != nil {
		suo.SetSort(*i)
	}
	return suo
}

// AddSort adds i to the "sort" field.
func (suo *StaffUpdateOne) AddSort(i int32) *StaffUpdateOne {
	suo.mutation.AddSort(i)
	return suo
}

// ClearSort clears the value of the "sort" field.
func (suo *StaffUpdateOne) ClearSort() *StaffUpdateOne {
	suo.mutation.ClearSort()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *StaffUpdateOne) SetRemark(s string) *StaffUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableRemark(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *StaffUpdateOne) ClearRemark() *StaffUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// SetUsername sets the "username" field.
func (suo *StaffUpdateOne) SetUsername(s string) *StaffUpdateOne {
	suo.mutation.SetUsername(s)
	return suo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableUsername(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetUsername(*s)
	}
	return suo
}

// SetPassword sets the "password" field.
func (suo *StaffUpdateOne) SetPassword(s string) *StaffUpdateOne {
	suo.mutation.SetPassword(s)
	return suo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillablePassword(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetPassword(*s)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *StaffUpdateOne) SetName(s string) *StaffUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableName(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetGender sets the "gender" field.
func (suo *StaffUpdateOne) SetGender(s string) *StaffUpdateOne {
	suo.mutation.SetGender(s)
	return suo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableGender(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetGender(*s)
	}
	return suo
}

// ClearGender clears the value of the "gender" field.
func (suo *StaffUpdateOne) ClearGender() *StaffUpdateOne {
	suo.mutation.ClearGender()
	return suo
}

// SetWorkStatus sets the "work_status" field.
func (suo *StaffUpdateOne) SetWorkStatus(s string) *StaffUpdateOne {
	suo.mutation.SetWorkStatus(s)
	return suo
}

// SetNillableWorkStatus sets the "work_status" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableWorkStatus(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetWorkStatus(*s)
	}
	return suo
}

// ClearWorkStatus clears the value of the "work_status" field.
func (suo *StaffUpdateOne) ClearWorkStatus() *StaffUpdateOne {
	suo.mutation.ClearWorkStatus()
	return suo
}

// SetMobile sets the "mobile" field.
func (suo *StaffUpdateOne) SetMobile(s string) *StaffUpdateOne {
	suo.mutation.SetMobile(s)
	return suo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableMobile(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetMobile(*s)
	}
	return suo
}

// SetEmail sets the "email" field.
func (suo *StaffUpdateOne) SetEmail(s string) *StaffUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableEmail(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetEmail(*s)
	}
	return suo
}

// SetAvatar sets the "avatar" field.
func (suo *StaffUpdateOne) SetAvatar(s string) *StaffUpdateOne {
	suo.mutation.SetAvatar(s)
	return suo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableAvatar(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetAvatar(*s)
	}
	return suo
}

// ClearAvatar clears the value of the "avatar" field.
func (suo *StaffUpdateOne) ClearAvatar() *StaffUpdateOne {
	suo.mutation.ClearAvatar()
	return suo
}

// SetOrganizationID sets the "organization_id" field.
func (suo *StaffUpdateOne) SetOrganizationID(s string) *StaffUpdateOne {
	suo.mutation.SetOrganizationID(s)
	return suo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableOrganizationID(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetOrganizationID(*s)
	}
	return suo
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (suo *StaffUpdateOne) ClearOrganizationID() *StaffUpdateOne {
	suo.mutation.ClearOrganizationID()
	return suo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (suo *StaffUpdateOne) SetOrganization(o *Organization) *StaffUpdateOne {
	return suo.SetOrganizationID(o.ID)
}

// AddRoleIDs adds the "roles" edge to the Staff_Role entity by IDs.
func (suo *StaffUpdateOne) AddRoleIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.AddRoleIDs(ids...)
	return suo
}

// AddRoles adds the "roles" edges to the Staff_Role entity.
func (suo *StaffUpdateOne) AddRoles(s ...*Staff_Role) *StaffUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddRoleIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the Staff_Position entity by IDs.
func (suo *StaffUpdateOne) AddPositionIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.AddPositionIDs(ids...)
	return suo
}

// AddPositions adds the "positions" edges to the Staff_Position entity.
func (suo *StaffUpdateOne) AddPositions(s ...*Staff_Position) *StaffUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddPositionIDs(ids...)
}

// Mutation returns the StaffMutation object of the builder.
func (suo *StaffUpdateOne) Mutation() *StaffMutation {
	return suo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (suo *StaffUpdateOne) ClearOrganization() *StaffUpdateOne {
	suo.mutation.ClearOrganization()
	return suo
}

// ClearRoles clears all "roles" edges to the Staff_Role entity.
func (suo *StaffUpdateOne) ClearRoles() *StaffUpdateOne {
	suo.mutation.ClearRoles()
	return suo
}

// RemoveRoleIDs removes the "roles" edge to Staff_Role entities by IDs.
func (suo *StaffUpdateOne) RemoveRoleIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.RemoveRoleIDs(ids...)
	return suo
}

// RemoveRoles removes "roles" edges to Staff_Role entities.
func (suo *StaffUpdateOne) RemoveRoles(s ...*Staff_Role) *StaffUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveRoleIDs(ids...)
}

// ClearPositions clears all "positions" edges to the Staff_Position entity.
func (suo *StaffUpdateOne) ClearPositions() *StaffUpdateOne {
	suo.mutation.ClearPositions()
	return suo
}

// RemovePositionIDs removes the "positions" edge to Staff_Position entities by IDs.
func (suo *StaffUpdateOne) RemovePositionIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.RemovePositionIDs(ids...)
	return suo
}

// RemovePositions removes "positions" edges to Staff_Position entities.
func (suo *StaffUpdateOne) RemovePositions(s ...*Staff_Position) *StaffUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemovePositionIDs(ids...)
}

// Where appends a list predicates to the StaffUpdate builder.
func (suo *StaffUpdateOne) Where(ps ...predicate.Staff) *StaffUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StaffUpdateOne) Select(field string, fields ...string) *StaffUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Staff entity.
func (suo *StaffUpdateOne) Save(ctx context.Context) (*Staff, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StaffUpdateOne) SaveX(ctx context.Context) *Staff {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StaffUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StaffUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StaffUpdateOne) check() error {
	if v, ok := suo.mutation.Username(); ok {
		if err := staff.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Staff.username": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Password(); ok {
		if err := staff.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Staff.password": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := staff.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Staff.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Mobile(); ok {
		if err := staff.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "Staff.mobile": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Email(); ok {
		if err := staff.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Staff.email": %w`, err)}
		}
	}
	return nil
}

func (suo *StaffUpdateOne) sqlSave(ctx context.Context) (_node *Staff, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(staff.Table, staff.Columns, sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Staff.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staff.FieldID)
		for _, f := range fields {
			if !staff.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != staff.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(staff.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(staff.FieldUpdatedAt, field.TypeInt64, value)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(staff.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(staff.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(staff.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(staff.FieldStatus, field.TypeString, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(staff.FieldStatus, field.TypeString)
	}
	if value, ok := suo.mutation.Sort(); ok {
		_spec.SetField(staff.FieldSort, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedSort(); ok {
		_spec.AddField(staff.FieldSort, field.TypeInt32, value)
	}
	if suo.mutation.SortCleared() {
		_spec.ClearField(staff.FieldSort, field.TypeInt32)
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.SetField(staff.FieldRemark, field.TypeString, value)
	}
	if suo.mutation.RemarkCleared() {
		_spec.ClearField(staff.FieldRemark, field.TypeString)
	}
	if value, ok := suo.mutation.Username(); ok {
		_spec.SetField(staff.FieldUsername, field.TypeString, value)
	}
	if value, ok := suo.mutation.Password(); ok {
		_spec.SetField(staff.FieldPassword, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(staff.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Gender(); ok {
		_spec.SetField(staff.FieldGender, field.TypeString, value)
	}
	if suo.mutation.GenderCleared() {
		_spec.ClearField(staff.FieldGender, field.TypeString)
	}
	if value, ok := suo.mutation.WorkStatus(); ok {
		_spec.SetField(staff.FieldWorkStatus, field.TypeString, value)
	}
	if suo.mutation.WorkStatusCleared() {
		_spec.ClearField(staff.FieldWorkStatus, field.TypeString)
	}
	if value, ok := suo.mutation.Mobile(); ok {
		_spec.SetField(staff.FieldMobile, field.TypeString, value)
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.SetField(staff.FieldEmail, field.TypeString, value)
	}
	if value, ok := suo.mutation.Avatar(); ok {
		_spec.SetField(staff.FieldAvatar, field.TypeString, value)
	}
	if suo.mutation.AvatarCleared() {
		_spec.ClearField(staff.FieldAvatar, field.TypeString)
	}
	if suo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staff.OrganizationTable,
			Columns: []string{staff.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staff.OrganizationTable,
			Columns: []string{staff.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.RolesTable,
			Columns: []string{staff.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !suo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.RolesTable,
			Columns: []string{staff.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.RolesTable,
			Columns: []string{staff.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.PositionsTable,
			Columns: []string{staff.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !suo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.PositionsTable,
			Columns: []string{staff.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.PositionsTable,
			Columns: []string{staff.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Staff{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
