// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/predicate"
	"github.com/golden-ocean/fiber-ocean/ent/staff_role"
)

// StaffRoleDelete is the builder for deleting a Staff_Role entity.
type StaffRoleDelete struct {
	config
	hooks    []Hook
	mutation *StaffRoleMutation
}

// Where appends a list predicates to the StaffRoleDelete builder.
func (srd *StaffRoleDelete) Where(ps ...predicate.Staff_Role) *StaffRoleDelete {
	srd.mutation.Where(ps...)
	return srd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (srd *StaffRoleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, srd.sqlExec, srd.mutation, srd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (srd *StaffRoleDelete) ExecX(ctx context.Context) int {
	n, err := srd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (srd *StaffRoleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(staff_role.Table, sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString))
	if ps := srd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, srd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	srd.mutation.done = true
	return affected, err
}

// StaffRoleDeleteOne is the builder for deleting a single Staff_Role entity.
type StaffRoleDeleteOne struct {
	srd *StaffRoleDelete
}

// Where appends a list predicates to the StaffRoleDelete builder.
func (srdo *StaffRoleDeleteOne) Where(ps ...predicate.Staff_Role) *StaffRoleDeleteOne {
	srdo.srd.mutation.Where(ps...)
	return srdo
}

// Exec executes the deletion query.
func (srdo *StaffRoleDeleteOne) Exec(ctx context.Context) error {
	n, err := srdo.srd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{staff_role.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (srdo *StaffRoleDeleteOne) ExecX(ctx context.Context) {
	if err := srdo.Exec(ctx); err != nil {
		panic(err)
	}
}
