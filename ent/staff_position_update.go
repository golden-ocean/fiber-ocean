// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/position"
	"github.com/golden-ocean/fiber-ocean/ent/predicate"
	"github.com/golden-ocean/fiber-ocean/ent/staff"
	"github.com/golden-ocean/fiber-ocean/ent/staff_position"
)

// StaffPositionUpdate is the builder for updating Staff_Position entities.
type StaffPositionUpdate struct {
	config
	hooks    []Hook
	mutation *StaffPositionMutation
}

// Where appends a list predicates to the StaffPositionUpdate builder.
func (spu *StaffPositionUpdate) Where(ps ...predicate.Staff_Position) *StaffPositionUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *StaffPositionUpdate) SetUpdatedAt(i int64) *StaffPositionUpdate {
	spu.mutation.ResetUpdatedAt()
	spu.mutation.SetUpdatedAt(i)
	return spu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spu *StaffPositionUpdate) SetNillableUpdatedAt(i *int64) *StaffPositionUpdate {
	if i != nil {
		spu.SetUpdatedAt(*i)
	}
	return spu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (spu *StaffPositionUpdate) AddUpdatedAt(i int64) *StaffPositionUpdate {
	spu.mutation.AddUpdatedAt(i)
	return spu
}

// SetUpdatedBy sets the "updated_by" field.
func (spu *StaffPositionUpdate) SetUpdatedBy(s string) *StaffPositionUpdate {
	spu.mutation.SetUpdatedBy(s)
	return spu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spu *StaffPositionUpdate) SetNillableUpdatedBy(s *string) *StaffPositionUpdate {
	if s != nil {
		spu.SetUpdatedBy(*s)
	}
	return spu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spu *StaffPositionUpdate) ClearUpdatedBy() *StaffPositionUpdate {
	spu.mutation.ClearUpdatedBy()
	return spu
}

// SetStaffID sets the "staff_id" field.
func (spu *StaffPositionUpdate) SetStaffID(s string) *StaffPositionUpdate {
	spu.mutation.SetStaffID(s)
	return spu
}

// SetNillableStaffID sets the "staff_id" field if the given value is not nil.
func (spu *StaffPositionUpdate) SetNillableStaffID(s *string) *StaffPositionUpdate {
	if s != nil {
		spu.SetStaffID(*s)
	}
	return spu
}

// SetPositionID sets the "position_id" field.
func (spu *StaffPositionUpdate) SetPositionID(s string) *StaffPositionUpdate {
	spu.mutation.SetPositionID(s)
	return spu
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (spu *StaffPositionUpdate) SetNillablePositionID(s *string) *StaffPositionUpdate {
	if s != nil {
		spu.SetPositionID(*s)
	}
	return spu
}

// SetStaffsID sets the "staffs" edge to the Staff entity by ID.
func (spu *StaffPositionUpdate) SetStaffsID(id string) *StaffPositionUpdate {
	spu.mutation.SetStaffsID(id)
	return spu
}

// SetStaffs sets the "staffs" edge to the Staff entity.
func (spu *StaffPositionUpdate) SetStaffs(s *Staff) *StaffPositionUpdate {
	return spu.SetStaffsID(s.ID)
}

// SetPositionsID sets the "positions" edge to the Position entity by ID.
func (spu *StaffPositionUpdate) SetPositionsID(id string) *StaffPositionUpdate {
	spu.mutation.SetPositionsID(id)
	return spu
}

// SetPositions sets the "positions" edge to the Position entity.
func (spu *StaffPositionUpdate) SetPositions(p *Position) *StaffPositionUpdate {
	return spu.SetPositionsID(p.ID)
}

// Mutation returns the StaffPositionMutation object of the builder.
func (spu *StaffPositionUpdate) Mutation() *StaffPositionMutation {
	return spu.mutation
}

// ClearStaffs clears the "staffs" edge to the Staff entity.
func (spu *StaffPositionUpdate) ClearStaffs() *StaffPositionUpdate {
	spu.mutation.ClearStaffs()
	return spu
}

// ClearPositions clears the "positions" edge to the Position entity.
func (spu *StaffPositionUpdate) ClearPositions() *StaffPositionUpdate {
	spu.mutation.ClearPositions()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *StaffPositionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *StaffPositionUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *StaffPositionUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *StaffPositionUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *StaffPositionUpdate) check() error {
	if v, ok := spu.mutation.StaffID(); ok {
		if err := staff_position.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Position.staff_id": %w`, err)}
		}
	}
	if v, ok := spu.mutation.PositionID(); ok {
		if err := staff_position.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Position.position_id": %w`, err)}
		}
	}
	if _, ok := spu.mutation.StaffsID(); spu.mutation.StaffsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Staff_Position.staffs"`)
	}
	if _, ok := spu.mutation.PositionsID(); spu.mutation.PositionsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Staff_Position.positions"`)
	}
	return nil
}

func (spu *StaffPositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(staff_position.Table, staff_position.Columns, sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(staff_position.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(staff_position.FieldUpdatedAt, field.TypeInt64, value)
	}
	if spu.mutation.CreatedByCleared() {
		_spec.ClearField(staff_position.FieldCreatedBy, field.TypeString)
	}
	if value, ok := spu.mutation.UpdatedBy(); ok {
		_spec.SetField(staff_position.FieldUpdatedBy, field.TypeString, value)
	}
	if spu.mutation.UpdatedByCleared() {
		_spec.ClearField(staff_position.FieldUpdatedBy, field.TypeString)
	}
	if spu.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.StaffsTable,
			Columns: []string{staff_position.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.StaffsTable,
			Columns: []string{staff_position.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.PositionsTable,
			Columns: []string{staff_position.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.PositionsTable,
			Columns: []string{staff_position.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff_position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// StaffPositionUpdateOne is the builder for updating a single Staff_Position entity.
type StaffPositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StaffPositionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *StaffPositionUpdateOne) SetUpdatedAt(i int64) *StaffPositionUpdateOne {
	spuo.mutation.ResetUpdatedAt()
	spuo.mutation.SetUpdatedAt(i)
	return spuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spuo *StaffPositionUpdateOne) SetNillableUpdatedAt(i *int64) *StaffPositionUpdateOne {
	if i != nil {
		spuo.SetUpdatedAt(*i)
	}
	return spuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (spuo *StaffPositionUpdateOne) AddUpdatedAt(i int64) *StaffPositionUpdateOne {
	spuo.mutation.AddUpdatedAt(i)
	return spuo
}

// SetUpdatedBy sets the "updated_by" field.
func (spuo *StaffPositionUpdateOne) SetUpdatedBy(s string) *StaffPositionUpdateOne {
	spuo.mutation.SetUpdatedBy(s)
	return spuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spuo *StaffPositionUpdateOne) SetNillableUpdatedBy(s *string) *StaffPositionUpdateOne {
	if s != nil {
		spuo.SetUpdatedBy(*s)
	}
	return spuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spuo *StaffPositionUpdateOne) ClearUpdatedBy() *StaffPositionUpdateOne {
	spuo.mutation.ClearUpdatedBy()
	return spuo
}

// SetStaffID sets the "staff_id" field.
func (spuo *StaffPositionUpdateOne) SetStaffID(s string) *StaffPositionUpdateOne {
	spuo.mutation.SetStaffID(s)
	return spuo
}

// SetNillableStaffID sets the "staff_id" field if the given value is not nil.
func (spuo *StaffPositionUpdateOne) SetNillableStaffID(s *string) *StaffPositionUpdateOne {
	if s != nil {
		spuo.SetStaffID(*s)
	}
	return spuo
}

// SetPositionID sets the "position_id" field.
func (spuo *StaffPositionUpdateOne) SetPositionID(s string) *StaffPositionUpdateOne {
	spuo.mutation.SetPositionID(s)
	return spuo
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (spuo *StaffPositionUpdateOne) SetNillablePositionID(s *string) *StaffPositionUpdateOne {
	if s != nil {
		spuo.SetPositionID(*s)
	}
	return spuo
}

// SetStaffsID sets the "staffs" edge to the Staff entity by ID.
func (spuo *StaffPositionUpdateOne) SetStaffsID(id string) *StaffPositionUpdateOne {
	spuo.mutation.SetStaffsID(id)
	return spuo
}

// SetStaffs sets the "staffs" edge to the Staff entity.
func (spuo *StaffPositionUpdateOne) SetStaffs(s *Staff) *StaffPositionUpdateOne {
	return spuo.SetStaffsID(s.ID)
}

// SetPositionsID sets the "positions" edge to the Position entity by ID.
func (spuo *StaffPositionUpdateOne) SetPositionsID(id string) *StaffPositionUpdateOne {
	spuo.mutation.SetPositionsID(id)
	return spuo
}

// SetPositions sets the "positions" edge to the Position entity.
func (spuo *StaffPositionUpdateOne) SetPositions(p *Position) *StaffPositionUpdateOne {
	return spuo.SetPositionsID(p.ID)
}

// Mutation returns the StaffPositionMutation object of the builder.
func (spuo *StaffPositionUpdateOne) Mutation() *StaffPositionMutation {
	return spuo.mutation
}

// ClearStaffs clears the "staffs" edge to the Staff entity.
func (spuo *StaffPositionUpdateOne) ClearStaffs() *StaffPositionUpdateOne {
	spuo.mutation.ClearStaffs()
	return spuo
}

// ClearPositions clears the "positions" edge to the Position entity.
func (spuo *StaffPositionUpdateOne) ClearPositions() *StaffPositionUpdateOne {
	spuo.mutation.ClearPositions()
	return spuo
}

// Where appends a list predicates to the StaffPositionUpdate builder.
func (spuo *StaffPositionUpdateOne) Where(ps ...predicate.Staff_Position) *StaffPositionUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *StaffPositionUpdateOne) Select(field string, fields ...string) *StaffPositionUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated Staff_Position entity.
func (spuo *StaffPositionUpdateOne) Save(ctx context.Context) (*Staff_Position, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *StaffPositionUpdateOne) SaveX(ctx context.Context) *Staff_Position {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *StaffPositionUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *StaffPositionUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *StaffPositionUpdateOne) check() error {
	if v, ok := spuo.mutation.StaffID(); ok {
		if err := staff_position.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Position.staff_id": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.PositionID(); ok {
		if err := staff_position.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Position.position_id": %w`, err)}
		}
	}
	if _, ok := spuo.mutation.StaffsID(); spuo.mutation.StaffsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Staff_Position.staffs"`)
	}
	if _, ok := spuo.mutation.PositionsID(); spuo.mutation.PositionsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Staff_Position.positions"`)
	}
	return nil
}

func (spuo *StaffPositionUpdateOne) sqlSave(ctx context.Context) (_node *Staff_Position, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(staff_position.Table, staff_position.Columns, sqlgraph.NewFieldSpec(staff_position.FieldID, field.TypeString))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Staff_Position.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staff_position.FieldID)
		for _, f := range fields {
			if !staff_position.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != staff_position.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(staff_position.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(staff_position.FieldUpdatedAt, field.TypeInt64, value)
	}
	if spuo.mutation.CreatedByCleared() {
		_spec.ClearField(staff_position.FieldCreatedBy, field.TypeString)
	}
	if value, ok := spuo.mutation.UpdatedBy(); ok {
		_spec.SetField(staff_position.FieldUpdatedBy, field.TypeString, value)
	}
	if spuo.mutation.UpdatedByCleared() {
		_spec.ClearField(staff_position.FieldUpdatedBy, field.TypeString)
	}
	if spuo.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.StaffsTable,
			Columns: []string{staff_position.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.StaffsTable,
			Columns: []string{staff_position.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.PositionsTable,
			Columns: []string{staff_position.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_position.PositionsTable,
			Columns: []string{staff_position.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Staff_Position{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff_position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
