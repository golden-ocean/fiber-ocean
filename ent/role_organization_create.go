// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/organization"
	"github.com/golden-ocean/fiber-ocean/ent/role"
	"github.com/golden-ocean/fiber-ocean/ent/role_organization"
)

// RoleOrganizationCreate is the builder for creating a Role_Organization entity.
type RoleOrganizationCreate struct {
	config
	mutation *RoleOrganizationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (roc *RoleOrganizationCreate) SetCreatedAt(i int64) *RoleOrganizationCreate {
	roc.mutation.SetCreatedAt(i)
	return roc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (roc *RoleOrganizationCreate) SetNillableCreatedAt(i *int64) *RoleOrganizationCreate {
	if i != nil {
		roc.SetCreatedAt(*i)
	}
	return roc
}

// SetUpdatedAt sets the "updated_at" field.
func (roc *RoleOrganizationCreate) SetUpdatedAt(i int64) *RoleOrganizationCreate {
	roc.mutation.SetUpdatedAt(i)
	return roc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (roc *RoleOrganizationCreate) SetNillableUpdatedAt(i *int64) *RoleOrganizationCreate {
	if i != nil {
		roc.SetUpdatedAt(*i)
	}
	return roc
}

// SetCreatedBy sets the "created_by" field.
func (roc *RoleOrganizationCreate) SetCreatedBy(s string) *RoleOrganizationCreate {
	roc.mutation.SetCreatedBy(s)
	return roc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (roc *RoleOrganizationCreate) SetNillableCreatedBy(s *string) *RoleOrganizationCreate {
	if s != nil {
		roc.SetCreatedBy(*s)
	}
	return roc
}

// SetUpdatedBy sets the "updated_by" field.
func (roc *RoleOrganizationCreate) SetUpdatedBy(s string) *RoleOrganizationCreate {
	roc.mutation.SetUpdatedBy(s)
	return roc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (roc *RoleOrganizationCreate) SetNillableUpdatedBy(s *string) *RoleOrganizationCreate {
	if s != nil {
		roc.SetUpdatedBy(*s)
	}
	return roc
}

// SetRoleID sets the "role_id" field.
func (roc *RoleOrganizationCreate) SetRoleID(s string) *RoleOrganizationCreate {
	roc.mutation.SetRoleID(s)
	return roc
}

// SetOrganizationID sets the "organization_id" field.
func (roc *RoleOrganizationCreate) SetOrganizationID(s string) *RoleOrganizationCreate {
	roc.mutation.SetOrganizationID(s)
	return roc
}

// SetID sets the "id" field.
func (roc *RoleOrganizationCreate) SetID(s string) *RoleOrganizationCreate {
	roc.mutation.SetID(s)
	return roc
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (roc *RoleOrganizationCreate) SetRolesID(id string) *RoleOrganizationCreate {
	roc.mutation.SetRolesID(id)
	return roc
}

// SetRoles sets the "roles" edge to the Role entity.
func (roc *RoleOrganizationCreate) SetRoles(r *Role) *RoleOrganizationCreate {
	return roc.SetRolesID(r.ID)
}

// SetOrganizationsID sets the "organizations" edge to the Organization entity by ID.
func (roc *RoleOrganizationCreate) SetOrganizationsID(id string) *RoleOrganizationCreate {
	roc.mutation.SetOrganizationsID(id)
	return roc
}

// SetOrganizations sets the "organizations" edge to the Organization entity.
func (roc *RoleOrganizationCreate) SetOrganizations(o *Organization) *RoleOrganizationCreate {
	return roc.SetOrganizationsID(o.ID)
}

// Mutation returns the RoleOrganizationMutation object of the builder.
func (roc *RoleOrganizationCreate) Mutation() *RoleOrganizationMutation {
	return roc.mutation
}

// Save creates the Role_Organization in the database.
func (roc *RoleOrganizationCreate) Save(ctx context.Context) (*Role_Organization, error) {
	if err := roc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, roc.sqlSave, roc.mutation, roc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (roc *RoleOrganizationCreate) SaveX(ctx context.Context) *Role_Organization {
	v, err := roc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (roc *RoleOrganizationCreate) Exec(ctx context.Context) error {
	_, err := roc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (roc *RoleOrganizationCreate) ExecX(ctx context.Context) {
	if err := roc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (roc *RoleOrganizationCreate) defaults() error {
	if _, ok := roc.mutation.CreatedAt(); !ok {
		if role_organization.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized role_organization.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := role_organization.DefaultCreatedAt()
		roc.mutation.SetCreatedAt(v)
	}
	if _, ok := roc.mutation.UpdatedAt(); !ok {
		if role_organization.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized role_organization.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := role_organization.DefaultUpdatedAt()
		roc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (roc *RoleOrganizationCreate) check() error {
	if _, ok := roc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Role_Organization.created_at"`)}
	}
	if _, ok := roc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Role_Organization.updated_at"`)}
	}
	if _, ok := roc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "Role_Organization.role_id"`)}
	}
	if v, ok := roc.mutation.RoleID(); ok {
		if err := role_organization.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Role_Organization.role_id": %w`, err)}
		}
	}
	if _, ok := roc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Role_Organization.organization_id"`)}
	}
	if v, ok := roc.mutation.OrganizationID(); ok {
		if err := role_organization.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Role_Organization.organization_id": %w`, err)}
		}
	}
	if v, ok := roc.mutation.ID(); ok {
		if err := role_organization.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Role_Organization.id": %w`, err)}
		}
	}
	if _, ok := roc.mutation.RolesID(); !ok {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required edge "Role_Organization.roles"`)}
	}
	if _, ok := roc.mutation.OrganizationsID(); !ok {
		return &ValidationError{Name: "organizations", err: errors.New(`ent: missing required edge "Role_Organization.organizations"`)}
	}
	return nil
}

func (roc *RoleOrganizationCreate) sqlSave(ctx context.Context) (*Role_Organization, error) {
	if err := roc.check(); err != nil {
		return nil, err
	}
	_node, _spec := roc.createSpec()
	if err := sqlgraph.CreateNode(ctx, roc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Role_Organization.ID type: %T", _spec.ID.Value)
		}
	}
	roc.mutation.id = &_node.ID
	roc.mutation.done = true
	return _node, nil
}

func (roc *RoleOrganizationCreate) createSpec() (*Role_Organization, *sqlgraph.CreateSpec) {
	var (
		_node = &Role_Organization{config: roc.config}
		_spec = sqlgraph.NewCreateSpec(role_organization.Table, sqlgraph.NewFieldSpec(role_organization.FieldID, field.TypeString))
	)
	if id, ok := roc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := roc.mutation.CreatedAt(); ok {
		_spec.SetField(role_organization.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := roc.mutation.UpdatedAt(); ok {
		_spec.SetField(role_organization.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := roc.mutation.CreatedBy(); ok {
		_spec.SetField(role_organization.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := roc.mutation.UpdatedBy(); ok {
		_spec.SetField(role_organization.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if nodes := roc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_organization.RolesTable,
			Columns: []string{role_organization.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := roc.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_organization.OrganizationsTable,
			Columns: []string{role_organization.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoleOrganizationCreateBulk is the builder for creating many Role_Organization entities in bulk.
type RoleOrganizationCreateBulk struct {
	config
	err      error
	builders []*RoleOrganizationCreate
}

// Save creates the Role_Organization entities in the database.
func (rocb *RoleOrganizationCreateBulk) Save(ctx context.Context) ([]*Role_Organization, error) {
	if rocb.err != nil {
		return nil, rocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rocb.builders))
	nodes := make([]*Role_Organization, len(rocb.builders))
	mutators := make([]Mutator, len(rocb.builders))
	for i := range rocb.builders {
		func(i int, root context.Context) {
			builder := rocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleOrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rocb *RoleOrganizationCreateBulk) SaveX(ctx context.Context) []*Role_Organization {
	v, err := rocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rocb *RoleOrganizationCreateBulk) Exec(ctx context.Context) error {
	_, err := rocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rocb *RoleOrganizationCreateBulk) ExecX(ctx context.Context) {
	if err := rocb.Exec(ctx); err != nil {
		panic(err)
	}
}
