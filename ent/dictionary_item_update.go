// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/dictionary"
	"github.com/golden-ocean/fiber-ocean/ent/dictionary_item"
	"github.com/golden-ocean/fiber-ocean/ent/predicate"
)

// DictionaryItemUpdate is the builder for updating Dictionary_Item entities.
type DictionaryItemUpdate struct {
	config
	hooks    []Hook
	mutation *DictionaryItemMutation
}

// Where appends a list predicates to the DictionaryItemUpdate builder.
func (diu *DictionaryItemUpdate) Where(ps ...predicate.Dictionary_Item) *DictionaryItemUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetUpdatedAt sets the "updated_at" field.
func (diu *DictionaryItemUpdate) SetUpdatedAt(i int64) *DictionaryItemUpdate {
	diu.mutation.ResetUpdatedAt()
	diu.mutation.SetUpdatedAt(i)
	return diu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableUpdatedAt(i *int64) *DictionaryItemUpdate {
	if i != nil {
		diu.SetUpdatedAt(*i)
	}
	return diu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (diu *DictionaryItemUpdate) AddUpdatedAt(i int64) *DictionaryItemUpdate {
	diu.mutation.AddUpdatedAt(i)
	return diu
}

// SetUpdatedBy sets the "updated_by" field.
func (diu *DictionaryItemUpdate) SetUpdatedBy(s string) *DictionaryItemUpdate {
	diu.mutation.SetUpdatedBy(s)
	return diu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableUpdatedBy(s *string) *DictionaryItemUpdate {
	if s != nil {
		diu.SetUpdatedBy(*s)
	}
	return diu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (diu *DictionaryItemUpdate) ClearUpdatedBy() *DictionaryItemUpdate {
	diu.mutation.ClearUpdatedBy()
	return diu
}

// SetStatus sets the "status" field.
func (diu *DictionaryItemUpdate) SetStatus(s string) *DictionaryItemUpdate {
	diu.mutation.SetStatus(s)
	return diu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableStatus(s *string) *DictionaryItemUpdate {
	if s != nil {
		diu.SetStatus(*s)
	}
	return diu
}

// ClearStatus clears the value of the "status" field.
func (diu *DictionaryItemUpdate) ClearStatus() *DictionaryItemUpdate {
	diu.mutation.ClearStatus()
	return diu
}

// SetSort sets the "sort" field.
func (diu *DictionaryItemUpdate) SetSort(i int32) *DictionaryItemUpdate {
	diu.mutation.ResetSort()
	diu.mutation.SetSort(i)
	return diu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableSort(i *int32) *DictionaryItemUpdate {
	if i != nil {
		diu.SetSort(*i)
	}
	return diu
}

// AddSort adds i to the "sort" field.
func (diu *DictionaryItemUpdate) AddSort(i int32) *DictionaryItemUpdate {
	diu.mutation.AddSort(i)
	return diu
}

// ClearSort clears the value of the "sort" field.
func (diu *DictionaryItemUpdate) ClearSort() *DictionaryItemUpdate {
	diu.mutation.ClearSort()
	return diu
}

// SetRemark sets the "remark" field.
func (diu *DictionaryItemUpdate) SetRemark(s string) *DictionaryItemUpdate {
	diu.mutation.SetRemark(s)
	return diu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableRemark(s *string) *DictionaryItemUpdate {
	if s != nil {
		diu.SetRemark(*s)
	}
	return diu
}

// ClearRemark clears the value of the "remark" field.
func (diu *DictionaryItemUpdate) ClearRemark() *DictionaryItemUpdate {
	diu.mutation.ClearRemark()
	return diu
}

// SetLabel sets the "label" field.
func (diu *DictionaryItemUpdate) SetLabel(s string) *DictionaryItemUpdate {
	diu.mutation.SetLabel(s)
	return diu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableLabel(s *string) *DictionaryItemUpdate {
	if s != nil {
		diu.SetLabel(*s)
	}
	return diu
}

// SetValue sets the "value" field.
func (diu *DictionaryItemUpdate) SetValue(s string) *DictionaryItemUpdate {
	diu.mutation.SetValue(s)
	return diu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableValue(s *string) *DictionaryItemUpdate {
	if s != nil {
		diu.SetValue(*s)
	}
	return diu
}

// SetColor sets the "color" field.
func (diu *DictionaryItemUpdate) SetColor(s string) *DictionaryItemUpdate {
	diu.mutation.SetColor(s)
	return diu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableColor(s *string) *DictionaryItemUpdate {
	if s != nil {
		diu.SetColor(*s)
	}
	return diu
}

// SetDictionaryID sets the "dictionary_id" field.
func (diu *DictionaryItemUpdate) SetDictionaryID(s string) *DictionaryItemUpdate {
	diu.mutation.SetDictionaryID(s)
	return diu
}

// SetNillableDictionaryID sets the "dictionary_id" field if the given value is not nil.
func (diu *DictionaryItemUpdate) SetNillableDictionaryID(s *string) *DictionaryItemUpdate {
	if s != nil {
		diu.SetDictionaryID(*s)
	}
	return diu
}

// SetDictionary sets the "dictionary" edge to the Dictionary entity.
func (diu *DictionaryItemUpdate) SetDictionary(d *Dictionary) *DictionaryItemUpdate {
	return diu.SetDictionaryID(d.ID)
}

// Mutation returns the DictionaryItemMutation object of the builder.
func (diu *DictionaryItemUpdate) Mutation() *DictionaryItemMutation {
	return diu.mutation
}

// ClearDictionary clears the "dictionary" edge to the Dictionary entity.
func (diu *DictionaryItemUpdate) ClearDictionary() *DictionaryItemUpdate {
	diu.mutation.ClearDictionary()
	return diu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DictionaryItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, diu.sqlSave, diu.mutation, diu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DictionaryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DictionaryItemUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DictionaryItemUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diu *DictionaryItemUpdate) check() error {
	if v, ok := diu.mutation.Label(); ok {
		if err := dictionary_item.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Dictionary_Item.label": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Value(); ok {
		if err := dictionary_item.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Dictionary_Item.value": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Color(); ok {
		if err := dictionary_item.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Dictionary_Item.color": %w`, err)}
		}
	}
	if v, ok := diu.mutation.DictionaryID(); ok {
		if err := dictionary_item.DictionaryIDValidator(v); err != nil {
			return &ValidationError{Name: "dictionary_id", err: fmt.Errorf(`ent: validator failed for field "Dictionary_Item.dictionary_id": %w`, err)}
		}
	}
	if _, ok := diu.mutation.DictionaryID(); diu.mutation.DictionaryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Dictionary_Item.dictionary"`)
	}
	return nil
}

func (diu *DictionaryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := diu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictionary_item.Table, dictionary_item.Columns, sqlgraph.NewFieldSpec(dictionary_item.FieldID, field.TypeString))
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary_item.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := diu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dictionary_item.FieldUpdatedAt, field.TypeInt64, value)
	}
	if diu.mutation.CreatedByCleared() {
		_spec.ClearField(dictionary_item.FieldCreatedBy, field.TypeString)
	}
	if value, ok := diu.mutation.UpdatedBy(); ok {
		_spec.SetField(dictionary_item.FieldUpdatedBy, field.TypeString, value)
	}
	if diu.mutation.UpdatedByCleared() {
		_spec.ClearField(dictionary_item.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := diu.mutation.Status(); ok {
		_spec.SetField(dictionary_item.FieldStatus, field.TypeString, value)
	}
	if diu.mutation.StatusCleared() {
		_spec.ClearField(dictionary_item.FieldStatus, field.TypeString)
	}
	if value, ok := diu.mutation.Sort(); ok {
		_spec.SetField(dictionary_item.FieldSort, field.TypeInt32, value)
	}
	if value, ok := diu.mutation.AddedSort(); ok {
		_spec.AddField(dictionary_item.FieldSort, field.TypeInt32, value)
	}
	if diu.mutation.SortCleared() {
		_spec.ClearField(dictionary_item.FieldSort, field.TypeInt32)
	}
	if value, ok := diu.mutation.Remark(); ok {
		_spec.SetField(dictionary_item.FieldRemark, field.TypeString, value)
	}
	if diu.mutation.RemarkCleared() {
		_spec.ClearField(dictionary_item.FieldRemark, field.TypeString)
	}
	if value, ok := diu.mutation.Label(); ok {
		_spec.SetField(dictionary_item.FieldLabel, field.TypeString, value)
	}
	if value, ok := diu.mutation.Value(); ok {
		_spec.SetField(dictionary_item.FieldValue, field.TypeString, value)
	}
	if value, ok := diu.mutation.Color(); ok {
		_spec.SetField(dictionary_item.FieldColor, field.TypeString, value)
	}
	if diu.mutation.DictionaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionary_item.DictionaryTable,
			Columns: []string{dictionary_item.DictionaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.DictionaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionary_item.DictionaryTable,
			Columns: []string{dictionary_item.DictionaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary_item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	diu.mutation.done = true
	return n, nil
}

// DictionaryItemUpdateOne is the builder for updating a single Dictionary_Item entity.
type DictionaryItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictionaryItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (diuo *DictionaryItemUpdateOne) SetUpdatedAt(i int64) *DictionaryItemUpdateOne {
	diuo.mutation.ResetUpdatedAt()
	diuo.mutation.SetUpdatedAt(i)
	return diuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableUpdatedAt(i *int64) *DictionaryItemUpdateOne {
	if i != nil {
		diuo.SetUpdatedAt(*i)
	}
	return diuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (diuo *DictionaryItemUpdateOne) AddUpdatedAt(i int64) *DictionaryItemUpdateOne {
	diuo.mutation.AddUpdatedAt(i)
	return diuo
}

// SetUpdatedBy sets the "updated_by" field.
func (diuo *DictionaryItemUpdateOne) SetUpdatedBy(s string) *DictionaryItemUpdateOne {
	diuo.mutation.SetUpdatedBy(s)
	return diuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableUpdatedBy(s *string) *DictionaryItemUpdateOne {
	if s != nil {
		diuo.SetUpdatedBy(*s)
	}
	return diuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (diuo *DictionaryItemUpdateOne) ClearUpdatedBy() *DictionaryItemUpdateOne {
	diuo.mutation.ClearUpdatedBy()
	return diuo
}

// SetStatus sets the "status" field.
func (diuo *DictionaryItemUpdateOne) SetStatus(s string) *DictionaryItemUpdateOne {
	diuo.mutation.SetStatus(s)
	return diuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableStatus(s *string) *DictionaryItemUpdateOne {
	if s != nil {
		diuo.SetStatus(*s)
	}
	return diuo
}

// ClearStatus clears the value of the "status" field.
func (diuo *DictionaryItemUpdateOne) ClearStatus() *DictionaryItemUpdateOne {
	diuo.mutation.ClearStatus()
	return diuo
}

// SetSort sets the "sort" field.
func (diuo *DictionaryItemUpdateOne) SetSort(i int32) *DictionaryItemUpdateOne {
	diuo.mutation.ResetSort()
	diuo.mutation.SetSort(i)
	return diuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableSort(i *int32) *DictionaryItemUpdateOne {
	if i != nil {
		diuo.SetSort(*i)
	}
	return diuo
}

// AddSort adds i to the "sort" field.
func (diuo *DictionaryItemUpdateOne) AddSort(i int32) *DictionaryItemUpdateOne {
	diuo.mutation.AddSort(i)
	return diuo
}

// ClearSort clears the value of the "sort" field.
func (diuo *DictionaryItemUpdateOne) ClearSort() *DictionaryItemUpdateOne {
	diuo.mutation.ClearSort()
	return diuo
}

// SetRemark sets the "remark" field.
func (diuo *DictionaryItemUpdateOne) SetRemark(s string) *DictionaryItemUpdateOne {
	diuo.mutation.SetRemark(s)
	return diuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableRemark(s *string) *DictionaryItemUpdateOne {
	if s != nil {
		diuo.SetRemark(*s)
	}
	return diuo
}

// ClearRemark clears the value of the "remark" field.
func (diuo *DictionaryItemUpdateOne) ClearRemark() *DictionaryItemUpdateOne {
	diuo.mutation.ClearRemark()
	return diuo
}

// SetLabel sets the "label" field.
func (diuo *DictionaryItemUpdateOne) SetLabel(s string) *DictionaryItemUpdateOne {
	diuo.mutation.SetLabel(s)
	return diuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableLabel(s *string) *DictionaryItemUpdateOne {
	if s != nil {
		diuo.SetLabel(*s)
	}
	return diuo
}

// SetValue sets the "value" field.
func (diuo *DictionaryItemUpdateOne) SetValue(s string) *DictionaryItemUpdateOne {
	diuo.mutation.SetValue(s)
	return diuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableValue(s *string) *DictionaryItemUpdateOne {
	if s != nil {
		diuo.SetValue(*s)
	}
	return diuo
}

// SetColor sets the "color" field.
func (diuo *DictionaryItemUpdateOne) SetColor(s string) *DictionaryItemUpdateOne {
	diuo.mutation.SetColor(s)
	return diuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableColor(s *string) *DictionaryItemUpdateOne {
	if s != nil {
		diuo.SetColor(*s)
	}
	return diuo
}

// SetDictionaryID sets the "dictionary_id" field.
func (diuo *DictionaryItemUpdateOne) SetDictionaryID(s string) *DictionaryItemUpdateOne {
	diuo.mutation.SetDictionaryID(s)
	return diuo
}

// SetNillableDictionaryID sets the "dictionary_id" field if the given value is not nil.
func (diuo *DictionaryItemUpdateOne) SetNillableDictionaryID(s *string) *DictionaryItemUpdateOne {
	if s != nil {
		diuo.SetDictionaryID(*s)
	}
	return diuo
}

// SetDictionary sets the "dictionary" edge to the Dictionary entity.
func (diuo *DictionaryItemUpdateOne) SetDictionary(d *Dictionary) *DictionaryItemUpdateOne {
	return diuo.SetDictionaryID(d.ID)
}

// Mutation returns the DictionaryItemMutation object of the builder.
func (diuo *DictionaryItemUpdateOne) Mutation() *DictionaryItemMutation {
	return diuo.mutation
}

// ClearDictionary clears the "dictionary" edge to the Dictionary entity.
func (diuo *DictionaryItemUpdateOne) ClearDictionary() *DictionaryItemUpdateOne {
	diuo.mutation.ClearDictionary()
	return diuo
}

// Where appends a list predicates to the DictionaryItemUpdate builder.
func (diuo *DictionaryItemUpdateOne) Where(ps ...predicate.Dictionary_Item) *DictionaryItemUpdateOne {
	diuo.mutation.Where(ps...)
	return diuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DictionaryItemUpdateOne) Select(field string, fields ...string) *DictionaryItemUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated Dictionary_Item entity.
func (diuo *DictionaryItemUpdateOne) Save(ctx context.Context) (*Dictionary_Item, error) {
	return withHooks(ctx, diuo.sqlSave, diuo.mutation, diuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DictionaryItemUpdateOne) SaveX(ctx context.Context) *Dictionary_Item {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DictionaryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DictionaryItemUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diuo *DictionaryItemUpdateOne) check() error {
	if v, ok := diuo.mutation.Label(); ok {
		if err := dictionary_item.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Dictionary_Item.label": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Value(); ok {
		if err := dictionary_item.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Dictionary_Item.value": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Color(); ok {
		if err := dictionary_item.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Dictionary_Item.color": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.DictionaryID(); ok {
		if err := dictionary_item.DictionaryIDValidator(v); err != nil {
			return &ValidationError{Name: "dictionary_id", err: fmt.Errorf(`ent: validator failed for field "Dictionary_Item.dictionary_id": %w`, err)}
		}
	}
	if _, ok := diuo.mutation.DictionaryID(); diuo.mutation.DictionaryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Dictionary_Item.dictionary"`)
	}
	return nil
}

func (diuo *DictionaryItemUpdateOne) sqlSave(ctx context.Context) (_node *Dictionary_Item, err error) {
	if err := diuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictionary_item.Table, dictionary_item.Columns, sqlgraph.NewFieldSpec(dictionary_item.FieldID, field.TypeString))
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dictionary_Item.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictionary_item.FieldID)
		for _, f := range fields {
			if !dictionary_item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictionary_item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary_item.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := diuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dictionary_item.FieldUpdatedAt, field.TypeInt64, value)
	}
	if diuo.mutation.CreatedByCleared() {
		_spec.ClearField(dictionary_item.FieldCreatedBy, field.TypeString)
	}
	if value, ok := diuo.mutation.UpdatedBy(); ok {
		_spec.SetField(dictionary_item.FieldUpdatedBy, field.TypeString, value)
	}
	if diuo.mutation.UpdatedByCleared() {
		_spec.ClearField(dictionary_item.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := diuo.mutation.Status(); ok {
		_spec.SetField(dictionary_item.FieldStatus, field.TypeString, value)
	}
	if diuo.mutation.StatusCleared() {
		_spec.ClearField(dictionary_item.FieldStatus, field.TypeString)
	}
	if value, ok := diuo.mutation.Sort(); ok {
		_spec.SetField(dictionary_item.FieldSort, field.TypeInt32, value)
	}
	if value, ok := diuo.mutation.AddedSort(); ok {
		_spec.AddField(dictionary_item.FieldSort, field.TypeInt32, value)
	}
	if diuo.mutation.SortCleared() {
		_spec.ClearField(dictionary_item.FieldSort, field.TypeInt32)
	}
	if value, ok := diuo.mutation.Remark(); ok {
		_spec.SetField(dictionary_item.FieldRemark, field.TypeString, value)
	}
	if diuo.mutation.RemarkCleared() {
		_spec.ClearField(dictionary_item.FieldRemark, field.TypeString)
	}
	if value, ok := diuo.mutation.Label(); ok {
		_spec.SetField(dictionary_item.FieldLabel, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Value(); ok {
		_spec.SetField(dictionary_item.FieldValue, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Color(); ok {
		_spec.SetField(dictionary_item.FieldColor, field.TypeString, value)
	}
	if diuo.mutation.DictionaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionary_item.DictionaryTable,
			Columns: []string{dictionary_item.DictionaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.DictionaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionary_item.DictionaryTable,
			Columns: []string{dictionary_item.DictionaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dictionary_Item{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary_item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	diuo.mutation.done = true
	return _node, nil
}
