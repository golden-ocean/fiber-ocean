// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/predicate"
	"github.com/golden-ocean/fiber-ocean/ent/role"
	"github.com/golden-ocean/fiber-ocean/ent/staff"
	"github.com/golden-ocean/fiber-ocean/ent/staff_role"
)

// StaffRoleUpdate is the builder for updating Staff_Role entities.
type StaffRoleUpdate struct {
	config
	hooks    []Hook
	mutation *StaffRoleMutation
}

// Where appends a list predicates to the StaffRoleUpdate builder.
func (sru *StaffRoleUpdate) Where(ps ...predicate.Staff_Role) *StaffRoleUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *StaffRoleUpdate) SetUpdatedAt(i int64) *StaffRoleUpdate {
	sru.mutation.ResetUpdatedAt()
	sru.mutation.SetUpdatedAt(i)
	return sru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sru *StaffRoleUpdate) SetNillableUpdatedAt(i *int64) *StaffRoleUpdate {
	if i != nil {
		sru.SetUpdatedAt(*i)
	}
	return sru
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sru *StaffRoleUpdate) AddUpdatedAt(i int64) *StaffRoleUpdate {
	sru.mutation.AddUpdatedAt(i)
	return sru
}

// SetUpdatedBy sets the "updated_by" field.
func (sru *StaffRoleUpdate) SetUpdatedBy(s string) *StaffRoleUpdate {
	sru.mutation.SetUpdatedBy(s)
	return sru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sru *StaffRoleUpdate) SetNillableUpdatedBy(s *string) *StaffRoleUpdate {
	if s != nil {
		sru.SetUpdatedBy(*s)
	}
	return sru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sru *StaffRoleUpdate) ClearUpdatedBy() *StaffRoleUpdate {
	sru.mutation.ClearUpdatedBy()
	return sru
}

// SetStaffID sets the "staff_id" field.
func (sru *StaffRoleUpdate) SetStaffID(s string) *StaffRoleUpdate {
	sru.mutation.SetStaffID(s)
	return sru
}

// SetNillableStaffID sets the "staff_id" field if the given value is not nil.
func (sru *StaffRoleUpdate) SetNillableStaffID(s *string) *StaffRoleUpdate {
	if s != nil {
		sru.SetStaffID(*s)
	}
	return sru
}

// SetRoleID sets the "role_id" field.
func (sru *StaffRoleUpdate) SetRoleID(s string) *StaffRoleUpdate {
	sru.mutation.SetRoleID(s)
	return sru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (sru *StaffRoleUpdate) SetNillableRoleID(s *string) *StaffRoleUpdate {
	if s != nil {
		sru.SetRoleID(*s)
	}
	return sru
}

// SetStaffsID sets the "staffs" edge to the Staff entity by ID.
func (sru *StaffRoleUpdate) SetStaffsID(id string) *StaffRoleUpdate {
	sru.mutation.SetStaffsID(id)
	return sru
}

// SetStaffs sets the "staffs" edge to the Staff entity.
func (sru *StaffRoleUpdate) SetStaffs(s *Staff) *StaffRoleUpdate {
	return sru.SetStaffsID(s.ID)
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (sru *StaffRoleUpdate) SetRolesID(id string) *StaffRoleUpdate {
	sru.mutation.SetRolesID(id)
	return sru
}

// SetRoles sets the "roles" edge to the Role entity.
func (sru *StaffRoleUpdate) SetRoles(r *Role) *StaffRoleUpdate {
	return sru.SetRolesID(r.ID)
}

// Mutation returns the StaffRoleMutation object of the builder.
func (sru *StaffRoleUpdate) Mutation() *StaffRoleMutation {
	return sru.mutation
}

// ClearStaffs clears the "staffs" edge to the Staff entity.
func (sru *StaffRoleUpdate) ClearStaffs() *StaffRoleUpdate {
	sru.mutation.ClearStaffs()
	return sru
}

// ClearRoles clears the "roles" edge to the Role entity.
func (sru *StaffRoleUpdate) ClearRoles() *StaffRoleUpdate {
	sru.mutation.ClearRoles()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *StaffRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *StaffRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *StaffRoleUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *StaffRoleUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *StaffRoleUpdate) check() error {
	if v, ok := sru.mutation.StaffID(); ok {
		if err := staff_role.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Role.staff_id": %w`, err)}
		}
	}
	if v, ok := sru.mutation.RoleID(); ok {
		if err := staff_role.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Role.role_id": %w`, err)}
		}
	}
	if _, ok := sru.mutation.StaffsID(); sru.mutation.StaffsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Staff_Role.staffs"`)
	}
	if _, ok := sru.mutation.RolesID(); sru.mutation.RolesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Staff_Role.roles"`)
	}
	return nil
}

func (sru *StaffRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(staff_role.Table, staff_role.Columns, sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(staff_role.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(staff_role.FieldUpdatedAt, field.TypeInt64, value)
	}
	if sru.mutation.CreatedByCleared() {
		_spec.ClearField(staff_role.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sru.mutation.UpdatedBy(); ok {
		_spec.SetField(staff_role.FieldUpdatedBy, field.TypeString, value)
	}
	if sru.mutation.UpdatedByCleared() {
		_spec.ClearField(staff_role.FieldUpdatedBy, field.TypeString)
	}
	if sru.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.StaffsTable,
			Columns: []string{staff_role.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.StaffsTable,
			Columns: []string{staff_role.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.RolesTable,
			Columns: []string{staff_role.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.RolesTable,
			Columns: []string{staff_role.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff_role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// StaffRoleUpdateOne is the builder for updating a single Staff_Role entity.
type StaffRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StaffRoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *StaffRoleUpdateOne) SetUpdatedAt(i int64) *StaffRoleUpdateOne {
	sruo.mutation.ResetUpdatedAt()
	sruo.mutation.SetUpdatedAt(i)
	return sruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sruo *StaffRoleUpdateOne) SetNillableUpdatedAt(i *int64) *StaffRoleUpdateOne {
	if i != nil {
		sruo.SetUpdatedAt(*i)
	}
	return sruo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (sruo *StaffRoleUpdateOne) AddUpdatedAt(i int64) *StaffRoleUpdateOne {
	sruo.mutation.AddUpdatedAt(i)
	return sruo
}

// SetUpdatedBy sets the "updated_by" field.
func (sruo *StaffRoleUpdateOne) SetUpdatedBy(s string) *StaffRoleUpdateOne {
	sruo.mutation.SetUpdatedBy(s)
	return sruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sruo *StaffRoleUpdateOne) SetNillableUpdatedBy(s *string) *StaffRoleUpdateOne {
	if s != nil {
		sruo.SetUpdatedBy(*s)
	}
	return sruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sruo *StaffRoleUpdateOne) ClearUpdatedBy() *StaffRoleUpdateOne {
	sruo.mutation.ClearUpdatedBy()
	return sruo
}

// SetStaffID sets the "staff_id" field.
func (sruo *StaffRoleUpdateOne) SetStaffID(s string) *StaffRoleUpdateOne {
	sruo.mutation.SetStaffID(s)
	return sruo
}

// SetNillableStaffID sets the "staff_id" field if the given value is not nil.
func (sruo *StaffRoleUpdateOne) SetNillableStaffID(s *string) *StaffRoleUpdateOne {
	if s != nil {
		sruo.SetStaffID(*s)
	}
	return sruo
}

// SetRoleID sets the "role_id" field.
func (sruo *StaffRoleUpdateOne) SetRoleID(s string) *StaffRoleUpdateOne {
	sruo.mutation.SetRoleID(s)
	return sruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (sruo *StaffRoleUpdateOne) SetNillableRoleID(s *string) *StaffRoleUpdateOne {
	if s != nil {
		sruo.SetRoleID(*s)
	}
	return sruo
}

// SetStaffsID sets the "staffs" edge to the Staff entity by ID.
func (sruo *StaffRoleUpdateOne) SetStaffsID(id string) *StaffRoleUpdateOne {
	sruo.mutation.SetStaffsID(id)
	return sruo
}

// SetStaffs sets the "staffs" edge to the Staff entity.
func (sruo *StaffRoleUpdateOne) SetStaffs(s *Staff) *StaffRoleUpdateOne {
	return sruo.SetStaffsID(s.ID)
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (sruo *StaffRoleUpdateOne) SetRolesID(id string) *StaffRoleUpdateOne {
	sruo.mutation.SetRolesID(id)
	return sruo
}

// SetRoles sets the "roles" edge to the Role entity.
func (sruo *StaffRoleUpdateOne) SetRoles(r *Role) *StaffRoleUpdateOne {
	return sruo.SetRolesID(r.ID)
}

// Mutation returns the StaffRoleMutation object of the builder.
func (sruo *StaffRoleUpdateOne) Mutation() *StaffRoleMutation {
	return sruo.mutation
}

// ClearStaffs clears the "staffs" edge to the Staff entity.
func (sruo *StaffRoleUpdateOne) ClearStaffs() *StaffRoleUpdateOne {
	sruo.mutation.ClearStaffs()
	return sruo
}

// ClearRoles clears the "roles" edge to the Role entity.
func (sruo *StaffRoleUpdateOne) ClearRoles() *StaffRoleUpdateOne {
	sruo.mutation.ClearRoles()
	return sruo
}

// Where appends a list predicates to the StaffRoleUpdate builder.
func (sruo *StaffRoleUpdateOne) Where(ps ...predicate.Staff_Role) *StaffRoleUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *StaffRoleUpdateOne) Select(field string, fields ...string) *StaffRoleUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated Staff_Role entity.
func (sruo *StaffRoleUpdateOne) Save(ctx context.Context) (*Staff_Role, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *StaffRoleUpdateOne) SaveX(ctx context.Context) *Staff_Role {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *StaffRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *StaffRoleUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *StaffRoleUpdateOne) check() error {
	if v, ok := sruo.mutation.StaffID(); ok {
		if err := staff_role.StaffIDValidator(v); err != nil {
			return &ValidationError{Name: "staff_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Role.staff_id": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.RoleID(); ok {
		if err := staff_role.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Staff_Role.role_id": %w`, err)}
		}
	}
	if _, ok := sruo.mutation.StaffsID(); sruo.mutation.StaffsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Staff_Role.staffs"`)
	}
	if _, ok := sruo.mutation.RolesID(); sruo.mutation.RolesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Staff_Role.roles"`)
	}
	return nil
}

func (sruo *StaffRoleUpdateOne) sqlSave(ctx context.Context) (_node *Staff_Role, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(staff_role.Table, staff_role.Columns, sqlgraph.NewFieldSpec(staff_role.FieldID, field.TypeString))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Staff_Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staff_role.FieldID)
		for _, f := range fields {
			if !staff_role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != staff_role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(staff_role.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(staff_role.FieldUpdatedAt, field.TypeInt64, value)
	}
	if sruo.mutation.CreatedByCleared() {
		_spec.ClearField(staff_role.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sruo.mutation.UpdatedBy(); ok {
		_spec.SetField(staff_role.FieldUpdatedBy, field.TypeString, value)
	}
	if sruo.mutation.UpdatedByCleared() {
		_spec.ClearField(staff_role.FieldUpdatedBy, field.TypeString)
	}
	if sruo.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.StaffsTable,
			Columns: []string{staff_role.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.StaffsTable,
			Columns: []string{staff_role.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.RolesTable,
			Columns: []string{staff_role.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff_role.RolesTable,
			Columns: []string{staff_role.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Staff_Role{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff_role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
