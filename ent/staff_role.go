// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/golden-ocean/fiber-ocean/ent/role"
	"github.com/golden-ocean/fiber-ocean/ent/staff"
	"github.com/golden-ocean/fiber-ocean/ent/staff_role"
)

// Staff_Role is the model entity for the Staff_Role schema.
type Staff_Role struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID string `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 创建人员
	CreatedBy string `json:"created_by,omitempty"`
	// 更新人员
	UpdatedBy string `json:"updated_by,omitempty"`
	// 员工ID
	StaffID string `json:"staff_id,omitempty"`
	// 角色ID
	RoleID string `json:"role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Staff_RoleQuery when eager-loading is set.
	Edges        Staff_RoleEdges `json:"-"`
	selectValues sql.SelectValues
}

// Staff_RoleEdges holds the relations/edges for other nodes in the graph.
type Staff_RoleEdges struct {
	// Staffs holds the value of the staffs edge.
	Staffs *Staff `json:"staffs,omitempty"`
	// Roles holds the value of the roles edge.
	Roles *Role `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StaffsOrErr returns the Staffs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Staff_RoleEdges) StaffsOrErr() (*Staff, error) {
	if e.Staffs != nil {
		return e.Staffs, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: staff.Label}
	}
	return nil, &NotLoadedError{edge: "staffs"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Staff_RoleEdges) RolesOrErr() (*Role, error) {
	if e.Roles != nil {
		return e.Roles, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Staff_Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case staff_role.FieldCreatedAt, staff_role.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case staff_role.FieldID, staff_role.FieldCreatedBy, staff_role.FieldUpdatedBy, staff_role.FieldStaffID, staff_role.FieldRoleID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Staff_Role fields.
func (sr *Staff_Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staff_role.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sr.ID = value.String
			}
		case staff_role.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Int64
			}
		case staff_role.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Int64
			}
		case staff_role.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sr.CreatedBy = value.String
			}
		case staff_role.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sr.UpdatedBy = value.String
			}
		case staff_role.FieldStaffID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field staff_id", values[i])
			} else if value.Valid {
				sr.StaffID = value.String
			}
		case staff_role.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				sr.RoleID = value.String
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Staff_Role.
// This includes values selected through modifiers, order, etc.
func (sr *Staff_Role) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QueryStaffs queries the "staffs" edge of the Staff_Role entity.
func (sr *Staff_Role) QueryStaffs() *StaffQuery {
	return NewStaffRoleClient(sr.config).QueryStaffs(sr)
}

// QueryRoles queries the "roles" edge of the Staff_Role entity.
func (sr *Staff_Role) QueryRoles() *RoleQuery {
	return NewStaffRoleClient(sr.config).QueryRoles(sr)
}

// Update returns a builder for updating this Staff_Role.
// Note that you need to call Staff_Role.Unwrap() before calling this method if this Staff_Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *Staff_Role) Update() *StaffRoleUpdateOne {
	return NewStaffRoleClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the Staff_Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *Staff_Role) Unwrap() *Staff_Role {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Staff_Role is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *Staff_Role) String() string {
	var builder strings.Builder
	builder.WriteString("Staff_Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", sr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", sr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("staff_id=")
	builder.WriteString(sr.StaffID)
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(sr.RoleID)
	builder.WriteByte(')')
	return builder.String()
}

// Staff_Roles is a parsable slice of Staff_Role.
type Staff_Roles []*Staff_Role
