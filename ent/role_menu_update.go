// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/menu"
	"github.com/golden-ocean/fiber-ocean/ent/predicate"
	"github.com/golden-ocean/fiber-ocean/ent/role"
	"github.com/golden-ocean/fiber-ocean/ent/role_menu"
)

// RoleMenuUpdate is the builder for updating Role_Menu entities.
type RoleMenuUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMenuMutation
}

// Where appends a list predicates to the RoleMenuUpdate builder.
func (rmu *RoleMenuUpdate) Where(ps ...predicate.Role_Menu) *RoleMenuUpdate {
	rmu.mutation.Where(ps...)
	return rmu
}

// SetUpdatedAt sets the "updated_at" field.
func (rmu *RoleMenuUpdate) SetUpdatedAt(i int64) *RoleMenuUpdate {
	rmu.mutation.ResetUpdatedAt()
	rmu.mutation.SetUpdatedAt(i)
	return rmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmu *RoleMenuUpdate) SetNillableUpdatedAt(i *int64) *RoleMenuUpdate {
	if i != nil {
		rmu.SetUpdatedAt(*i)
	}
	return rmu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (rmu *RoleMenuUpdate) AddUpdatedAt(i int64) *RoleMenuUpdate {
	rmu.mutation.AddUpdatedAt(i)
	return rmu
}

// SetUpdatedBy sets the "updated_by" field.
func (rmu *RoleMenuUpdate) SetUpdatedBy(s string) *RoleMenuUpdate {
	rmu.mutation.SetUpdatedBy(s)
	return rmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rmu *RoleMenuUpdate) SetNillableUpdatedBy(s *string) *RoleMenuUpdate {
	if s != nil {
		rmu.SetUpdatedBy(*s)
	}
	return rmu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (rmu *RoleMenuUpdate) ClearUpdatedBy() *RoleMenuUpdate {
	rmu.mutation.ClearUpdatedBy()
	return rmu
}

// SetRoleID sets the "role_id" field.
func (rmu *RoleMenuUpdate) SetRoleID(s string) *RoleMenuUpdate {
	rmu.mutation.SetRoleID(s)
	return rmu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rmu *RoleMenuUpdate) SetNillableRoleID(s *string) *RoleMenuUpdate {
	if s != nil {
		rmu.SetRoleID(*s)
	}
	return rmu
}

// SetMenuID sets the "menu_id" field.
func (rmu *RoleMenuUpdate) SetMenuID(s string) *RoleMenuUpdate {
	rmu.mutation.SetMenuID(s)
	return rmu
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (rmu *RoleMenuUpdate) SetNillableMenuID(s *string) *RoleMenuUpdate {
	if s != nil {
		rmu.SetMenuID(*s)
	}
	return rmu
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (rmu *RoleMenuUpdate) SetRolesID(id string) *RoleMenuUpdate {
	rmu.mutation.SetRolesID(id)
	return rmu
}

// SetRoles sets the "roles" edge to the Role entity.
func (rmu *RoleMenuUpdate) SetRoles(r *Role) *RoleMenuUpdate {
	return rmu.SetRolesID(r.ID)
}

// SetMenusID sets the "menus" edge to the Menu entity by ID.
func (rmu *RoleMenuUpdate) SetMenusID(id string) *RoleMenuUpdate {
	rmu.mutation.SetMenusID(id)
	return rmu
}

// SetMenus sets the "menus" edge to the Menu entity.
func (rmu *RoleMenuUpdate) SetMenus(m *Menu) *RoleMenuUpdate {
	return rmu.SetMenusID(m.ID)
}

// Mutation returns the RoleMenuMutation object of the builder.
func (rmu *RoleMenuUpdate) Mutation() *RoleMenuMutation {
	return rmu.mutation
}

// ClearRoles clears the "roles" edge to the Role entity.
func (rmu *RoleMenuUpdate) ClearRoles() *RoleMenuUpdate {
	rmu.mutation.ClearRoles()
	return rmu
}

// ClearMenus clears the "menus" edge to the Menu entity.
func (rmu *RoleMenuUpdate) ClearMenus() *RoleMenuUpdate {
	rmu.mutation.ClearMenus()
	return rmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmu *RoleMenuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rmu.sqlSave, rmu.mutation, rmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmu *RoleMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := rmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmu *RoleMenuUpdate) Exec(ctx context.Context) error {
	_, err := rmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmu *RoleMenuUpdate) ExecX(ctx context.Context) {
	if err := rmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmu *RoleMenuUpdate) check() error {
	if v, ok := rmu.mutation.RoleID(); ok {
		if err := role_menu.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Role_Menu.role_id": %w`, err)}
		}
	}
	if v, ok := rmu.mutation.MenuID(); ok {
		if err := role_menu.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "Role_Menu.menu_id": %w`, err)}
		}
	}
	if _, ok := rmu.mutation.RolesID(); rmu.mutation.RolesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Role_Menu.roles"`)
	}
	if _, ok := rmu.mutation.MenusID(); rmu.mutation.MenusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Role_Menu.menus"`)
	}
	return nil
}

func (rmu *RoleMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(role_menu.Table, role_menu.Columns, sqlgraph.NewFieldSpec(role_menu.FieldID, field.TypeString))
	if ps := rmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmu.mutation.UpdatedAt(); ok {
		_spec.SetField(role_menu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := rmu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(role_menu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if rmu.mutation.CreatedByCleared() {
		_spec.ClearField(role_menu.FieldCreatedBy, field.TypeString)
	}
	if value, ok := rmu.mutation.UpdatedBy(); ok {
		_spec.SetField(role_menu.FieldUpdatedBy, field.TypeString, value)
	}
	if rmu.mutation.UpdatedByCleared() {
		_spec.ClearField(role_menu.FieldUpdatedBy, field.TypeString)
	}
	if rmu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_menu.RolesTable,
			Columns: []string{role_menu.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_menu.RolesTable,
			Columns: []string{role_menu.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_menu.MenusTable,
			Columns: []string{role_menu.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_menu.MenusTable,
			Columns: []string{role_menu.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role_menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmu.mutation.done = true
	return n, nil
}

// RoleMenuUpdateOne is the builder for updating a single Role_Menu entity.
type RoleMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMenuMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (rmuo *RoleMenuUpdateOne) SetUpdatedAt(i int64) *RoleMenuUpdateOne {
	rmuo.mutation.ResetUpdatedAt()
	rmuo.mutation.SetUpdatedAt(i)
	return rmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmuo *RoleMenuUpdateOne) SetNillableUpdatedAt(i *int64) *RoleMenuUpdateOne {
	if i != nil {
		rmuo.SetUpdatedAt(*i)
	}
	return rmuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (rmuo *RoleMenuUpdateOne) AddUpdatedAt(i int64) *RoleMenuUpdateOne {
	rmuo.mutation.AddUpdatedAt(i)
	return rmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (rmuo *RoleMenuUpdateOne) SetUpdatedBy(s string) *RoleMenuUpdateOne {
	rmuo.mutation.SetUpdatedBy(s)
	return rmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rmuo *RoleMenuUpdateOne) SetNillableUpdatedBy(s *string) *RoleMenuUpdateOne {
	if s != nil {
		rmuo.SetUpdatedBy(*s)
	}
	return rmuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (rmuo *RoleMenuUpdateOne) ClearUpdatedBy() *RoleMenuUpdateOne {
	rmuo.mutation.ClearUpdatedBy()
	return rmuo
}

// SetRoleID sets the "role_id" field.
func (rmuo *RoleMenuUpdateOne) SetRoleID(s string) *RoleMenuUpdateOne {
	rmuo.mutation.SetRoleID(s)
	return rmuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rmuo *RoleMenuUpdateOne) SetNillableRoleID(s *string) *RoleMenuUpdateOne {
	if s != nil {
		rmuo.SetRoleID(*s)
	}
	return rmuo
}

// SetMenuID sets the "menu_id" field.
func (rmuo *RoleMenuUpdateOne) SetMenuID(s string) *RoleMenuUpdateOne {
	rmuo.mutation.SetMenuID(s)
	return rmuo
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (rmuo *RoleMenuUpdateOne) SetNillableMenuID(s *string) *RoleMenuUpdateOne {
	if s != nil {
		rmuo.SetMenuID(*s)
	}
	return rmuo
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (rmuo *RoleMenuUpdateOne) SetRolesID(id string) *RoleMenuUpdateOne {
	rmuo.mutation.SetRolesID(id)
	return rmuo
}

// SetRoles sets the "roles" edge to the Role entity.
func (rmuo *RoleMenuUpdateOne) SetRoles(r *Role) *RoleMenuUpdateOne {
	return rmuo.SetRolesID(r.ID)
}

// SetMenusID sets the "menus" edge to the Menu entity by ID.
func (rmuo *RoleMenuUpdateOne) SetMenusID(id string) *RoleMenuUpdateOne {
	rmuo.mutation.SetMenusID(id)
	return rmuo
}

// SetMenus sets the "menus" edge to the Menu entity.
func (rmuo *RoleMenuUpdateOne) SetMenus(m *Menu) *RoleMenuUpdateOne {
	return rmuo.SetMenusID(m.ID)
}

// Mutation returns the RoleMenuMutation object of the builder.
func (rmuo *RoleMenuUpdateOne) Mutation() *RoleMenuMutation {
	return rmuo.mutation
}

// ClearRoles clears the "roles" edge to the Role entity.
func (rmuo *RoleMenuUpdateOne) ClearRoles() *RoleMenuUpdateOne {
	rmuo.mutation.ClearRoles()
	return rmuo
}

// ClearMenus clears the "menus" edge to the Menu entity.
func (rmuo *RoleMenuUpdateOne) ClearMenus() *RoleMenuUpdateOne {
	rmuo.mutation.ClearMenus()
	return rmuo
}

// Where appends a list predicates to the RoleMenuUpdate builder.
func (rmuo *RoleMenuUpdateOne) Where(ps ...predicate.Role_Menu) *RoleMenuUpdateOne {
	rmuo.mutation.Where(ps...)
	return rmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmuo *RoleMenuUpdateOne) Select(field string, fields ...string) *RoleMenuUpdateOne {
	rmuo.fields = append([]string{field}, fields...)
	return rmuo
}

// Save executes the query and returns the updated Role_Menu entity.
func (rmuo *RoleMenuUpdateOne) Save(ctx context.Context) (*Role_Menu, error) {
	return withHooks(ctx, rmuo.sqlSave, rmuo.mutation, rmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmuo *RoleMenuUpdateOne) SaveX(ctx context.Context) *Role_Menu {
	node, err := rmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmuo *RoleMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := rmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmuo *RoleMenuUpdateOne) ExecX(ctx context.Context) {
	if err := rmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmuo *RoleMenuUpdateOne) check() error {
	if v, ok := rmuo.mutation.RoleID(); ok {
		if err := role_menu.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "Role_Menu.role_id": %w`, err)}
		}
	}
	if v, ok := rmuo.mutation.MenuID(); ok {
		if err := role_menu.MenuIDValidator(v); err != nil {
			return &ValidationError{Name: "menu_id", err: fmt.Errorf(`ent: validator failed for field "Role_Menu.menu_id": %w`, err)}
		}
	}
	if _, ok := rmuo.mutation.RolesID(); rmuo.mutation.RolesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Role_Menu.roles"`)
	}
	if _, ok := rmuo.mutation.MenusID(); rmuo.mutation.MenusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Role_Menu.menus"`)
	}
	return nil
}

func (rmuo *RoleMenuUpdateOne) sqlSave(ctx context.Context) (_node *Role_Menu, err error) {
	if err := rmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role_menu.Table, role_menu.Columns, sqlgraph.NewFieldSpec(role_menu.FieldID, field.TypeString))
	id, ok := rmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role_Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role_menu.FieldID)
		for _, f := range fields {
			if !role_menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role_menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(role_menu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := rmuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(role_menu.FieldUpdatedAt, field.TypeInt64, value)
	}
	if rmuo.mutation.CreatedByCleared() {
		_spec.ClearField(role_menu.FieldCreatedBy, field.TypeString)
	}
	if value, ok := rmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(role_menu.FieldUpdatedBy, field.TypeString, value)
	}
	if rmuo.mutation.UpdatedByCleared() {
		_spec.ClearField(role_menu.FieldUpdatedBy, field.TypeString)
	}
	if rmuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_menu.RolesTable,
			Columns: []string{role_menu.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_menu.RolesTable,
			Columns: []string{role_menu.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rmuo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_menu.MenusTable,
			Columns: []string{role_menu.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   role_menu.MenusTable,
			Columns: []string{role_menu.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Role_Menu{config: rmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role_menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmuo.mutation.done = true
	return _node, nil
}
