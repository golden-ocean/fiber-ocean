// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/golden-ocean/fiber-ocean/ent/organization"
	"github.com/golden-ocean/fiber-ocean/ent/predicate"
	"github.com/golden-ocean/fiber-ocean/ent/role"
	"github.com/golden-ocean/fiber-ocean/ent/role_organization"
)

// RoleOrganizationQuery is the builder for querying Role_Organization entities.
type RoleOrganizationQuery struct {
	config
	ctx               *QueryContext
	order             []role_organization.OrderOption
	inters            []Interceptor
	predicates        []predicate.Role_Organization
	withRoles         *RoleQuery
	withOrganizations *OrganizationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoleOrganizationQuery builder.
func (roq *RoleOrganizationQuery) Where(ps ...predicate.Role_Organization) *RoleOrganizationQuery {
	roq.predicates = append(roq.predicates, ps...)
	return roq
}

// Limit the number of records to be returned by this query.
func (roq *RoleOrganizationQuery) Limit(limit int) *RoleOrganizationQuery {
	roq.ctx.Limit = &limit
	return roq
}

// Offset to start from.
func (roq *RoleOrganizationQuery) Offset(offset int) *RoleOrganizationQuery {
	roq.ctx.Offset = &offset
	return roq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (roq *RoleOrganizationQuery) Unique(unique bool) *RoleOrganizationQuery {
	roq.ctx.Unique = &unique
	return roq
}

// Order specifies how the records should be ordered.
func (roq *RoleOrganizationQuery) Order(o ...role_organization.OrderOption) *RoleOrganizationQuery {
	roq.order = append(roq.order, o...)
	return roq
}

// QueryRoles chains the current query on the "roles" edge.
func (roq *RoleOrganizationQuery) QueryRoles() *RoleQuery {
	query := (&RoleClient{config: roq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := roq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := roq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(role_organization.Table, role_organization.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, role_organization.RolesTable, role_organization.RolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(roq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganizations chains the current query on the "organizations" edge.
func (roq *RoleOrganizationQuery) QueryOrganizations() *OrganizationQuery {
	query := (&OrganizationClient{config: roq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := roq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := roq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(role_organization.Table, role_organization.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, role_organization.OrganizationsTable, role_organization.OrganizationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(roq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Role_Organization entity from the query.
// Returns a *NotFoundError when no Role_Organization was found.
func (roq *RoleOrganizationQuery) First(ctx context.Context) (*Role_Organization, error) {
	nodes, err := roq.Limit(1).All(setContextOp(ctx, roq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{role_organization.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (roq *RoleOrganizationQuery) FirstX(ctx context.Context) *Role_Organization {
	node, err := roq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Role_Organization ID from the query.
// Returns a *NotFoundError when no Role_Organization ID was found.
func (roq *RoleOrganizationQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = roq.Limit(1).IDs(setContextOp(ctx, roq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{role_organization.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (roq *RoleOrganizationQuery) FirstIDX(ctx context.Context) string {
	id, err := roq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Role_Organization entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Role_Organization entity is found.
// Returns a *NotFoundError when no Role_Organization entities are found.
func (roq *RoleOrganizationQuery) Only(ctx context.Context) (*Role_Organization, error) {
	nodes, err := roq.Limit(2).All(setContextOp(ctx, roq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{role_organization.Label}
	default:
		return nil, &NotSingularError{role_organization.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (roq *RoleOrganizationQuery) OnlyX(ctx context.Context) *Role_Organization {
	node, err := roq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Role_Organization ID in the query.
// Returns a *NotSingularError when more than one Role_Organization ID is found.
// Returns a *NotFoundError when no entities are found.
func (roq *RoleOrganizationQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = roq.Limit(2).IDs(setContextOp(ctx, roq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{role_organization.Label}
	default:
		err = &NotSingularError{role_organization.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (roq *RoleOrganizationQuery) OnlyIDX(ctx context.Context) string {
	id, err := roq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Role_Organizations.
func (roq *RoleOrganizationQuery) All(ctx context.Context) ([]*Role_Organization, error) {
	ctx = setContextOp(ctx, roq.ctx, "All")
	if err := roq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Role_Organization, *RoleOrganizationQuery]()
	return withInterceptors[[]*Role_Organization](ctx, roq, qr, roq.inters)
}

// AllX is like All, but panics if an error occurs.
func (roq *RoleOrganizationQuery) AllX(ctx context.Context) []*Role_Organization {
	nodes, err := roq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Role_Organization IDs.
func (roq *RoleOrganizationQuery) IDs(ctx context.Context) (ids []string, err error) {
	if roq.ctx.Unique == nil && roq.path != nil {
		roq.Unique(true)
	}
	ctx = setContextOp(ctx, roq.ctx, "IDs")
	if err = roq.Select(role_organization.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (roq *RoleOrganizationQuery) IDsX(ctx context.Context) []string {
	ids, err := roq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (roq *RoleOrganizationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, roq.ctx, "Count")
	if err := roq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, roq, querierCount[*RoleOrganizationQuery](), roq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (roq *RoleOrganizationQuery) CountX(ctx context.Context) int {
	count, err := roq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (roq *RoleOrganizationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, roq.ctx, "Exist")
	switch _, err := roq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (roq *RoleOrganizationQuery) ExistX(ctx context.Context) bool {
	exist, err := roq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoleOrganizationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (roq *RoleOrganizationQuery) Clone() *RoleOrganizationQuery {
	if roq == nil {
		return nil
	}
	return &RoleOrganizationQuery{
		config:            roq.config,
		ctx:               roq.ctx.Clone(),
		order:             append([]role_organization.OrderOption{}, roq.order...),
		inters:            append([]Interceptor{}, roq.inters...),
		predicates:        append([]predicate.Role_Organization{}, roq.predicates...),
		withRoles:         roq.withRoles.Clone(),
		withOrganizations: roq.withOrganizations.Clone(),
		// clone intermediate query.
		sql:  roq.sql.Clone(),
		path: roq.path,
	}
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (roq *RoleOrganizationQuery) WithRoles(opts ...func(*RoleQuery)) *RoleOrganizationQuery {
	query := (&RoleClient{config: roq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	roq.withRoles = query
	return roq
}

// WithOrganizations tells the query-builder to eager-load the nodes that are connected to
// the "organizations" edge. The optional arguments are used to configure the query builder of the edge.
func (roq *RoleOrganizationQuery) WithOrganizations(opts ...func(*OrganizationQuery)) *RoleOrganizationQuery {
	query := (&OrganizationClient{config: roq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	roq.withOrganizations = query
	return roq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt int64 `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoleOrganization.Query().
//		GroupBy(role_organization.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (roq *RoleOrganizationQuery) GroupBy(field string, fields ...string) *RoleOrganizationGroupBy {
	roq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RoleOrganizationGroupBy{build: roq}
	grbuild.flds = &roq.ctx.Fields
	grbuild.label = role_organization.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt int64 `json:"created_at,omitempty"`
//	}
//
//	client.RoleOrganization.Query().
//		Select(role_organization.FieldCreatedAt).
//		Scan(ctx, &v)
func (roq *RoleOrganizationQuery) Select(fields ...string) *RoleOrganizationSelect {
	roq.ctx.Fields = append(roq.ctx.Fields, fields...)
	sbuild := &RoleOrganizationSelect{RoleOrganizationQuery: roq}
	sbuild.label = role_organization.Label
	sbuild.flds, sbuild.scan = &roq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RoleOrganizationSelect configured with the given aggregations.
func (roq *RoleOrganizationQuery) Aggregate(fns ...AggregateFunc) *RoleOrganizationSelect {
	return roq.Select().Aggregate(fns...)
}

func (roq *RoleOrganizationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range roq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, roq); err != nil {
				return err
			}
		}
	}
	for _, f := range roq.ctx.Fields {
		if !role_organization.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if roq.path != nil {
		prev, err := roq.path(ctx)
		if err != nil {
			return err
		}
		roq.sql = prev
	}
	return nil
}

func (roq *RoleOrganizationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Role_Organization, error) {
	var (
		nodes       = []*Role_Organization{}
		_spec       = roq.querySpec()
		loadedTypes = [2]bool{
			roq.withRoles != nil,
			roq.withOrganizations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Role_Organization).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Role_Organization{config: roq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, roq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := roq.withRoles; query != nil {
		if err := roq.loadRoles(ctx, query, nodes, nil,
			func(n *Role_Organization, e *Role) { n.Edges.Roles = e }); err != nil {
			return nil, err
		}
	}
	if query := roq.withOrganizations; query != nil {
		if err := roq.loadOrganizations(ctx, query, nodes, nil,
			func(n *Role_Organization, e *Organization) { n.Edges.Organizations = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (roq *RoleOrganizationQuery) loadRoles(ctx context.Context, query *RoleQuery, nodes []*Role_Organization, init func(*Role_Organization), assign func(*Role_Organization, *Role)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Role_Organization)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (roq *RoleOrganizationQuery) loadOrganizations(ctx context.Context, query *OrganizationQuery, nodes []*Role_Organization, init func(*Role_Organization), assign func(*Role_Organization, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Role_Organization)
	for i := range nodes {
		fk := nodes[i].OrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (roq *RoleOrganizationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := roq.querySpec()
	_spec.Node.Columns = roq.ctx.Fields
	if len(roq.ctx.Fields) > 0 {
		_spec.Unique = roq.ctx.Unique != nil && *roq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, roq.driver, _spec)
}

func (roq *RoleOrganizationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(role_organization.Table, role_organization.Columns, sqlgraph.NewFieldSpec(role_organization.FieldID, field.TypeString))
	_spec.From = roq.sql
	if unique := roq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if roq.path != nil {
		_spec.Unique = true
	}
	if fields := roq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role_organization.FieldID)
		for i := range fields {
			if fields[i] != role_organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if roq.withRoles != nil {
			_spec.Node.AddColumnOnce(role_organization.FieldRoleID)
		}
		if roq.withOrganizations != nil {
			_spec.Node.AddColumnOnce(role_organization.FieldOrganizationID)
		}
	}
	if ps := roq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := roq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := roq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := roq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (roq *RoleOrganizationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(roq.driver.Dialect())
	t1 := builder.Table(role_organization.Table)
	columns := roq.ctx.Fields
	if len(columns) == 0 {
		columns = role_organization.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if roq.sql != nil {
		selector = roq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if roq.ctx.Unique != nil && *roq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range roq.predicates {
		p(selector)
	}
	for _, p := range roq.order {
		p(selector)
	}
	if offset := roq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := roq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoleOrganizationGroupBy is the group-by builder for Role_Organization entities.
type RoleOrganizationGroupBy struct {
	selector
	build *RoleOrganizationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rogb *RoleOrganizationGroupBy) Aggregate(fns ...AggregateFunc) *RoleOrganizationGroupBy {
	rogb.fns = append(rogb.fns, fns...)
	return rogb
}

// Scan applies the selector query and scans the result into the given value.
func (rogb *RoleOrganizationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rogb.build.ctx, "GroupBy")
	if err := rogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleOrganizationQuery, *RoleOrganizationGroupBy](ctx, rogb.build, rogb, rogb.build.inters, v)
}

func (rogb *RoleOrganizationGroupBy) sqlScan(ctx context.Context, root *RoleOrganizationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rogb.fns))
	for _, fn := range rogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rogb.flds)+len(rogb.fns))
		for _, f := range *rogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RoleOrganizationSelect is the builder for selecting fields of RoleOrganization entities.
type RoleOrganizationSelect struct {
	*RoleOrganizationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ros *RoleOrganizationSelect) Aggregate(fns ...AggregateFunc) *RoleOrganizationSelect {
	ros.fns = append(ros.fns, fns...)
	return ros
}

// Scan applies the selector query and scans the result into the given value.
func (ros *RoleOrganizationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ros.ctx, "Select")
	if err := ros.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleOrganizationQuery, *RoleOrganizationSelect](ctx, ros.RoleOrganizationQuery, ros, ros.inters, v)
}

func (ros *RoleOrganizationSelect) sqlScan(ctx context.Context, root *RoleOrganizationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ros.fns))
	for _, fn := range ros.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ros.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ros.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
